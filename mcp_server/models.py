# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:22:25+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ARN(RootModel[str]):
    root: str


class AccountId(RootModel[constr(pattern=r'\d{12}')]):
    root: constr(pattern=r'\d{12}')


class AggregateConformancePackComplianceSummaryGroupKey(Enum):
    ACCOUNT_ID = 'ACCOUNT_ID'
    AWS_REGION = 'AWS_REGION'


class AggregatedSourceStatusType(Enum):
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    OUTDATED = 'OUTDATED'


class AggregatedSourceStatusTypeList(RootModel[List[AggregatedSourceStatusType]]):
    root: List[AggregatedSourceStatusType] = Field(..., min_length=1)


class AggregatedSourceType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATION = 'ORGANIZATION'


class AllSupported(RootModel[bool]):
    root: bool


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class Annotation(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class AutoRemediationAttemptSeconds(RootModel[conint(ge=1, le=2678000)]):
    root: conint(ge=1, le=2678000)


class AutoRemediationAttempts(RootModel[conint(ge=1, le=25)]):
    root: conint(ge=1, le=25)


class AvailabilityZone(RootModel[str]):
    root: str


class AwsRegion(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class BaseResourceId(RootModel[constr(min_length=1, max_length=768)]):
    root: constr(min_length=1, max_length=768)


class Boolean(RootModel[bool]):
    root: bool


class ChannelName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class ChronologicalOrder(Enum):
    Reverse = 'Reverse'
    Forward = 'Forward'


class ClientToken(RootModel[constr(min_length=64, max_length=256)]):
    root: constr(min_length=64, max_length=256)


class ComplianceScore(RootModel[str]):
    root: str


class ComplianceType(Enum):
    COMPLIANT = 'COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'
    NOT_APPLICABLE = 'NOT_APPLICABLE'
    INSUFFICIENT_DATA = 'INSUFFICIENT_DATA'


class ComplianceTypes(RootModel[List[ComplianceType]]):
    root: List[ComplianceType] = Field(..., max_length=3, min_length=0)


class ConfigRuleComplianceSummaryFilters(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    AwsRegion_1: Optional[AwsRegion] = Field(None, alias='AwsRegion')


class ConfigRuleComplianceSummaryGroupKey(Enum):
    ACCOUNT_ID = 'ACCOUNT_ID'
    AWS_REGION = 'AWS_REGION'


class ConfigRuleName(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class ConfigRuleNames(RootModel[List[ConfigRuleName]]):
    root: List[ConfigRuleName] = Field(..., max_length=25, min_length=0)


class ConfigRuleState(Enum):
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    DELETING_RESULTS = 'DELETING_RESULTS'
    EVALUATING = 'EVALUATING'


class Configuration(RootModel[str]):
    root: str


class ConfigurationAggregatorArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:config:[a-z\-\d]+:\d+:config-aggregator/config-aggregator-[a-z\d]+'
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:config:[a-z\-\d]+:\d+:config-aggregator/config-aggregator-[a-z\d]+'
    )


class ConfigurationAggregatorName(
    RootModel[constr(pattern=r'[\w\-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[\w\-]+', min_length=1, max_length=256)


class ConfigurationAggregatorNameList(RootModel[List[ConfigurationAggregatorName]]):
    root: List[ConfigurationAggregatorName] = Field(..., max_length=10, min_length=0)


class ConfigurationItemCaptureTime(RootModel[datetime]):
    root: datetime


class ConfigurationItemMD5Hash(RootModel[str]):
    root: str


class ConfigurationItemStatus(Enum):
    OK = 'OK'
    ResourceDiscovered = 'ResourceDiscovered'
    ResourceNotRecorded = 'ResourceNotRecorded'
    ResourceDeleted = 'ResourceDeleted'
    ResourceDeletedNotRecorded = 'ResourceDeletedNotRecorded'


class ConfigurationStateId(RootModel[str]):
    root: str


class ConformancePackArn(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ConformancePackComplianceType(Enum):
    COMPLIANT = 'COMPLIANT'
    NON_COMPLIANT = 'NON_COMPLIANT'
    INSUFFICIENT_DATA = 'INSUFFICIENT_DATA'


class ConformancePackId(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ConformancePackName(
    RootModel[constr(pattern=r'[a-zA-Z][-a-zA-Z0-9]*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z][-a-zA-Z0-9]*', min_length=1, max_length=256)


class ConformancePackNameFilter(RootModel[List[ConformancePackName]]):
    root: List[ConformancePackName] = Field(..., max_length=25, min_length=1)


class ConformancePackNamesList(RootModel[List[ConformancePackName]]):
    root: List[ConformancePackName] = Field(..., max_length=25, min_length=0)


class ConformancePackNamesToSummarizeList(RootModel[List[ConformancePackName]]):
    root: List[ConformancePackName] = Field(..., max_length=5, min_length=1)


class ConformancePackState(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_FAILED = 'DELETE_FAILED'


class ConformancePackStatusReason(RootModel[constr(min_length=0, max_length=2000)]):
    root: constr(min_length=0, max_length=2000)


class ConformancePackTemplateValidationException(RootModel[Any]):
    root: Any


class CosmosPageLimit(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class Date(RootModel[datetime]):
    root: datetime


class DebugLogDeliveryAccounts(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., max_length=1000, min_length=0)


class DeleteAggregationAuthorizationRequest(BaseModel):
    AuthorizedAccountId: AccountId
    AuthorizedAwsRegion: AwsRegion


class DeleteConfigRuleRequest(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')


class DeleteConfigurationAggregatorRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )


class DeleteConformancePackRequest(BaseModel):
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')


class DeleteDeliveryChannelRequest(BaseModel):
    DeliveryChannelName: ChannelName


class DeleteEvaluationResultsResponse(BaseModel):
    pass


class DeletePendingAggregationRequestRequest(BaseModel):
    RequesterAccountId: AccountId
    RequesterAwsRegion: AwsRegion


class DeleteRemediationConfigurationResponse(BaseModel):
    pass


class DeleteStoredQueryResponse(BaseModel):
    pass


class DeliverConfigSnapshotRequest(BaseModel):
    deliveryChannelName: ChannelName


class DeliveryChannelNameList(RootModel[List[ChannelName]]):
    root: List[ChannelName]


class DeliveryS3Bucket(RootModel[constr(min_length=0, max_length=63)]):
    root: constr(min_length=0, max_length=63)


class DeliveryS3KeyPrefix(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class DeliveryStatus(Enum):
    Success = 'Success'
    Failure = 'Failure'
    Not_Applicable = 'Not_Applicable'


class DescribeConformancePackComplianceLimit(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class DescribeDeliveryChannelStatusRequest(BaseModel):
    DeliveryChannelNames: Optional[DeliveryChannelNameList] = None


class DescribeDeliveryChannelsRequest(BaseModel):
    DeliveryChannelNames: Optional[DeliveryChannelNameList] = None


class DescribePendingAggregationRequestsLimit(RootModel[conint(ge=0, le=20)]):
    root: conint(ge=0, le=20)


class DescribeRemediationConfigurationsRequest(BaseModel):
    ConfigRuleNames_1: ConfigRuleNames = Field(..., alias='ConfigRuleNames')


class EarlierTime(RootModel[datetime]):
    root: datetime


class EmptiableStringWithCharLimit256(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class EvaluationContextIdentifier(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class EvaluationMode(Enum):
    DETECTIVE = 'DETECTIVE'
    PROACTIVE = 'PROACTIVE'


class EvaluationModeConfiguration(BaseModel):
    Mode: Optional[EvaluationMode] = None


class EvaluationModes(RootModel[List[EvaluationModeConfiguration]]):
    root: List[EvaluationModeConfiguration]


class EvaluationTimeout(RootModel[conint(ge=0, le=3600)]):
    root: conint(ge=0, le=3600)


class EventSource(Enum):
    aws_config = 'aws.config'


class ExcludedAccounts(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., max_length=1000, min_length=0)


class Expression(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class FieldName(RootModel[str]):
    root: str


class GetConformancePackComplianceDetailsLimit(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class GetCustomRulePolicyRequest(BaseModel):
    ConfigRuleName_1: Optional[ConfigRuleName] = Field(None, alias='ConfigRuleName')


class GroupByAPILimit(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class IdempotentParameterMismatch(RootModel[Any]):
    root: Any


class IncludeGlobalResourceTypes(RootModel[bool]):
    root: bool


class InsufficientDeliveryPolicyException(RootModel[Any]):
    root: Any


class InsufficientPermissionsException(RootModel[Any]):
    root: Any


class Integer(RootModel[int]):
    root: int


class InvalidConfigurationRecorderNameException(RootModel[Any]):
    root: Any


class InvalidDeliveryChannelNameException(RootModel[Any]):
    root: Any


class InvalidExpressionException(RootModel[Any]):
    root: Any


class InvalidLimitException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class InvalidRecordingGroupException(RootModel[Any]):
    root: Any


class InvalidResultTokenException(RootModel[Any]):
    root: Any


class InvalidRoleException(RootModel[Any]):
    root: Any


class InvalidS3KeyPrefixException(RootModel[Any]):
    root: Any


class InvalidS3KmsKeyArnException(RootModel[Any]):
    root: Any


class InvalidSNSTopicARNException(RootModel[Any]):
    root: Any


class InvalidTimeRangeException(RootModel[Any]):
    root: Any


class LastDeliveryChannelDeleteFailedException(RootModel[Any]):
    root: Any


class LastUpdatedTime(RootModel[datetime]):
    root: datetime


class LaterTime(RootModel[datetime]):
    root: datetime


class Limit(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListResourceEvaluationsPageItemLimit(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class Long(RootModel[int]):
    root: int


class MaxActiveResourcesExceededException(RootModel[Any]):
    root: Any


class MaxNumberOfConfigRulesExceededException(RootModel[Any]):
    root: Any


class MaxNumberOfConfigurationRecordersExceededException(RootModel[Any]):
    root: Any


class MaxNumberOfConformancePacksExceededException(RootModel[Any]):
    root: Any


class MaxNumberOfDeliveryChannelsExceededException(RootModel[Any]):
    root: Any


class MaxNumberOfOrganizationConfigRulesExceededException(RootModel[Any]):
    root: Any


class MaxNumberOfOrganizationConformancePacksExceededException(RootModel[Any]):
    root: Any


class MaxNumberOfRetentionConfigurationsExceededException(RootModel[Any]):
    root: Any


class MaximumExecutionFrequency(Enum):
    One_Hour = 'One_Hour'
    Three_Hours = 'Three_Hours'
    Six_Hours = 'Six_Hours'
    Twelve_Hours = 'Twelve_Hours'
    TwentyFour_Hours = 'TwentyFour_Hours'


class MemberAccountRuleStatus(Enum):
    CREATE_SUCCESSFUL = 'CREATE_SUCCESSFUL'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_SUCCESSFUL = 'DELETE_SUCCESSFUL'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    UPDATE_SUCCESSFUL = 'UPDATE_SUCCESSFUL'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'


class MessageType(Enum):
    ConfigurationItemChangeNotification = 'ConfigurationItemChangeNotification'
    ConfigurationSnapshotDeliveryCompleted = 'ConfigurationSnapshotDeliveryCompleted'
    ScheduledNotification = 'ScheduledNotification'
    OversizedConfigurationItemChangeNotification = (
        'OversizedConfigurationItemChangeNotification'
    )


class Name(RootModel[str]):
    root: str


class NextToken(RootModel[str]):
    root: str


class NoAvailableConfigurationRecorderException(RootModel[Any]):
    root: Any


class NoAvailableDeliveryChannelException(RootModel[Any]):
    root: Any


class NoAvailableOrganizationException(RootModel[Any]):
    root: Any


class NoRunningConfigurationRecorderException(RootModel[Any]):
    root: Any


class NoSuchBucketException(RootModel[Any]):
    root: Any


class NoSuchConfigRuleException(RootModel[Any]):
    root: Any


class NoSuchConfigRuleInConformancePackException(RootModel[Any]):
    root: Any


class NoSuchConfigurationAggregatorException(RootModel[Any]):
    root: Any


class NoSuchConfigurationRecorderException(RootModel[Any]):
    root: Any


class NoSuchConformancePackException(RootModel[Any]):
    root: Any


class NoSuchDeliveryChannelException(RootModel[Any]):
    root: Any


class NoSuchOrganizationConfigRuleException(RootModel[Any]):
    root: Any


class NoSuchOrganizationConformancePackException(RootModel[Any]):
    root: Any


class NoSuchRemediationConfigurationException(RootModel[Any]):
    root: Any


class NoSuchRemediationExceptionException(RootModel[Any]):
    root: Any


class NoSuchRetentionConfigurationException(RootModel[Any]):
    root: Any


class OrderingTimestamp(RootModel[datetime]):
    root: datetime


class OrganizationAccessDeniedException(RootModel[Any]):
    root: Any


class OrganizationAllFeaturesNotEnabledException(RootModel[Any]):
    root: Any


class OrganizationConfigRuleName(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=64)


class OrganizationConfigRuleTriggerType(Enum):
    ConfigurationItemChangeNotification = 'ConfigurationItemChangeNotification'
    OversizedConfigurationItemChangeNotification = (
        'OversizedConfigurationItemChangeNotification'
    )
    ScheduledNotification = 'ScheduledNotification'


class OrganizationConfigRuleTriggerTypeNoSN(Enum):
    ConfigurationItemChangeNotification = 'ConfigurationItemChangeNotification'
    OversizedConfigurationItemChangeNotification = (
        'OversizedConfigurationItemChangeNotification'
    )


class OrganizationConfigRuleTriggerTypeNoSNs(
    RootModel[List[OrganizationConfigRuleTriggerTypeNoSN]]
):
    root: List[OrganizationConfigRuleTriggerTypeNoSN]


class OrganizationConfigRuleTriggerTypes(
    RootModel[List[OrganizationConfigRuleTriggerType]]
):
    root: List[OrganizationConfigRuleTriggerType]


class OrganizationConformancePackName(
    RootModel[constr(pattern=r'[a-zA-Z][-a-zA-Z0-9]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z][-a-zA-Z0-9]*', min_length=1, max_length=128)


class OrganizationConformancePackNames(
    RootModel[List[OrganizationConformancePackName]]
):
    root: List[OrganizationConformancePackName] = Field(
        ..., max_length=25, min_length=0
    )


class OrganizationConformancePackTemplateValidationException(RootModel[Any]):
    root: Any


class OrganizationResourceDetailedStatus(Enum):
    CREATE_SUCCESSFUL = 'CREATE_SUCCESSFUL'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_SUCCESSFUL = 'DELETE_SUCCESSFUL'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    UPDATE_SUCCESSFUL = 'UPDATE_SUCCESSFUL'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'


class OrganizationResourceDetailedStatusFilters(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    Status: Optional[OrganizationResourceDetailedStatus] = None


class OrganizationResourceStatus(Enum):
    CREATE_SUCCESSFUL = 'CREATE_SUCCESSFUL'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_SUCCESSFUL = 'DELETE_SUCCESSFUL'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    UPDATE_SUCCESSFUL = 'UPDATE_SUCCESSFUL'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'


class OrganizationRuleStatus(Enum):
    CREATE_SUCCESSFUL = 'CREATE_SUCCESSFUL'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_SUCCESSFUL = 'DELETE_SUCCESSFUL'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    UPDATE_SUCCESSFUL = 'UPDATE_SUCCESSFUL'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_FAILED = 'UPDATE_FAILED'


class OversizedConfigurationItemException(RootModel[Any]):
    root: Any


class Owner(Enum):
    CUSTOM_LAMBDA = 'CUSTOM_LAMBDA'
    AWS = 'AWS'
    CUSTOM_POLICY = 'CUSTOM_POLICY'


class PageSizeLimit(RootModel[conint(ge=0, le=20)]):
    root: conint(ge=0, le=20)


class ParameterName(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class ParameterValue(RootModel[constr(min_length=0, max_length=4096)]):
    root: constr(min_length=0, max_length=4096)


class PendingAggregationRequest(BaseModel):
    RequesterAccountId: Optional[AccountId] = None
    RequesterAwsRegion: Optional[AwsRegion] = None


class PendingAggregationRequestList(RootModel[List[PendingAggregationRequest]]):
    root: List[PendingAggregationRequest]


class Percentage(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PolicyRuntime(
    RootModel[constr(pattern=r'guard\-2\.x\.x', min_length=1, max_length=64)]
):
    root: constr(pattern=r'guard\-2\.x\.x', min_length=1, max_length=64)


class PolicyText(RootModel[constr(min_length=0, max_length=10000)]):
    root: constr(min_length=0, max_length=10000)


class PutConformancePackResponse(BaseModel):
    ConformancePackArn_1: Optional[ConformancePackArn] = Field(
        None, alias='ConformancePackArn'
    )


class PutExternalEvaluationResponse(BaseModel):
    pass


class QueryArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[a-z\-]*:config:[a-z\-\d]+:\d+:stored-query/[a-zA-Z0-9-_]+/query-[a-zA-Z\d-_/]+$',
            min_length=1,
            max_length=500,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[a-z\-]*:config:[a-z\-\d]+:\d+:stored-query/[a-zA-Z0-9-_]+/query-[a-zA-Z\d-_/]+$',
        min_length=1,
        max_length=500,
    )


class QueryDescription(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=256)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=256)


class QueryExpression(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=4096)


class QueryId(RootModel[constr(pattern=r'^\S+$', min_length=1, max_length=36)]):
    root: constr(pattern=r'^\S+$', min_length=1, max_length=36)


class QueryName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)


class RecorderName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class RecorderStatus(Enum):
    Pending = 'Pending'
    Success = 'Success'
    Failure = 'Failure'


class ReevaluateConfigRuleNames(RootModel[List[ConfigRuleName]]):
    root: List[ConfigRuleName] = Field(..., max_length=25, min_length=1)


class RelatedEvent(RootModel[str]):
    root: str


class RelatedEventList(RootModel[List[RelatedEvent]]):
    root: List[RelatedEvent]


class RelationshipName(RootModel[str]):
    root: str


class RemediationExecutionState(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class RemediationExecutionStepState(Enum):
    SUCCEEDED = 'SUCCEEDED'
    PENDING = 'PENDING'
    FAILED = 'FAILED'


class RemediationInProgressException(RootModel[Any]):
    root: Any


class RemediationTargetType(Enum):
    SSM_DOCUMENT = 'SSM_DOCUMENT'


class ResourceConcurrentModificationException(RootModel[Any]):
    root: Any


class ResourceConfiguration(RootModel[constr(min_length=1, max_length=51200)]):
    root: constr(min_length=1, max_length=51200)


class ResourceConfigurationSchemaType(Enum):
    CFN_RESOURCE_SCHEMA = 'CFN_RESOURCE_SCHEMA'


class ResourceCountGroupKey(Enum):
    RESOURCE_TYPE = 'RESOURCE_TYPE'
    ACCOUNT_ID = 'ACCOUNT_ID'
    AWS_REGION = 'AWS_REGION'


class ResourceCreationTime(RootModel[datetime]):
    root: datetime


class ResourceDeletionTime(RootModel[datetime]):
    root: datetime


class ResourceEvaluationId(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class ResourceEvaluationStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'


class ResourceId(RootModel[constr(min_length=1, max_length=768)]):
    root: constr(min_length=1, max_length=768)


class ResourceIdList(RootModel[List[ResourceId]]):
    root: List[ResourceId]


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceName(RootModel[str]):
    root: str


class ResourceNotDiscoveredException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceType(Enum):
    AWS__EC2__CustomerGateway = 'AWS::EC2::CustomerGateway'
    AWS__EC2__EIP = 'AWS::EC2::EIP'
    AWS__EC2__Host = 'AWS::EC2::Host'
    AWS__EC2__Instance = 'AWS::EC2::Instance'
    AWS__EC2__InternetGateway = 'AWS::EC2::InternetGateway'
    AWS__EC2__NetworkAcl = 'AWS::EC2::NetworkAcl'
    AWS__EC2__NetworkInterface = 'AWS::EC2::NetworkInterface'
    AWS__EC2__RouteTable = 'AWS::EC2::RouteTable'
    AWS__EC2__SecurityGroup = 'AWS::EC2::SecurityGroup'
    AWS__EC2__Subnet = 'AWS::EC2::Subnet'
    AWS__CloudTrail__Trail = 'AWS::CloudTrail::Trail'
    AWS__EC2__Volume = 'AWS::EC2::Volume'
    AWS__EC2__VPC = 'AWS::EC2::VPC'
    AWS__EC2__VPNConnection = 'AWS::EC2::VPNConnection'
    AWS__EC2__VPNGateway = 'AWS::EC2::VPNGateway'
    AWS__EC2__RegisteredHAInstance = 'AWS::EC2::RegisteredHAInstance'
    AWS__EC2__NatGateway = 'AWS::EC2::NatGateway'
    AWS__EC2__EgressOnlyInternetGateway = 'AWS::EC2::EgressOnlyInternetGateway'
    AWS__EC2__VPCEndpoint = 'AWS::EC2::VPCEndpoint'
    AWS__EC2__VPCEndpointService = 'AWS::EC2::VPCEndpointService'
    AWS__EC2__FlowLog = 'AWS::EC2::FlowLog'
    AWS__EC2__VPCPeeringConnection = 'AWS::EC2::VPCPeeringConnection'
    AWS__Elasticsearch__Domain = 'AWS::Elasticsearch::Domain'
    AWS__IAM__Group = 'AWS::IAM::Group'
    AWS__IAM__Policy = 'AWS::IAM::Policy'
    AWS__IAM__Role = 'AWS::IAM::Role'
    AWS__IAM__User = 'AWS::IAM::User'
    AWS__ElasticLoadBalancingV2__LoadBalancer = (
        'AWS::ElasticLoadBalancingV2::LoadBalancer'
    )
    AWS__ACM__Certificate = 'AWS::ACM::Certificate'
    AWS__RDS__DBInstance = 'AWS::RDS::DBInstance'
    AWS__RDS__DBSubnetGroup = 'AWS::RDS::DBSubnetGroup'
    AWS__RDS__DBSecurityGroup = 'AWS::RDS::DBSecurityGroup'
    AWS__RDS__DBSnapshot = 'AWS::RDS::DBSnapshot'
    AWS__RDS__DBCluster = 'AWS::RDS::DBCluster'
    AWS__RDS__DBClusterSnapshot = 'AWS::RDS::DBClusterSnapshot'
    AWS__RDS__EventSubscription = 'AWS::RDS::EventSubscription'
    AWS__S3__Bucket = 'AWS::S3::Bucket'
    AWS__S3__AccountPublicAccessBlock = 'AWS::S3::AccountPublicAccessBlock'
    AWS__Redshift__Cluster = 'AWS::Redshift::Cluster'
    AWS__Redshift__ClusterSnapshot = 'AWS::Redshift::ClusterSnapshot'
    AWS__Redshift__ClusterParameterGroup = 'AWS::Redshift::ClusterParameterGroup'
    AWS__Redshift__ClusterSecurityGroup = 'AWS::Redshift::ClusterSecurityGroup'
    AWS__Redshift__ClusterSubnetGroup = 'AWS::Redshift::ClusterSubnetGroup'
    AWS__Redshift__EventSubscription = 'AWS::Redshift::EventSubscription'
    AWS__SSM__ManagedInstanceInventory = 'AWS::SSM::ManagedInstanceInventory'
    AWS__CloudWatch__Alarm = 'AWS::CloudWatch::Alarm'
    AWS__CloudFormation__Stack = 'AWS::CloudFormation::Stack'
    AWS__ElasticLoadBalancing__LoadBalancer = 'AWS::ElasticLoadBalancing::LoadBalancer'
    AWS__AutoScaling__AutoScalingGroup = 'AWS::AutoScaling::AutoScalingGroup'
    AWS__AutoScaling__LaunchConfiguration = 'AWS::AutoScaling::LaunchConfiguration'
    AWS__AutoScaling__ScalingPolicy = 'AWS::AutoScaling::ScalingPolicy'
    AWS__AutoScaling__ScheduledAction = 'AWS::AutoScaling::ScheduledAction'
    AWS__DynamoDB__Table = 'AWS::DynamoDB::Table'
    AWS__CodeBuild__Project = 'AWS::CodeBuild::Project'
    AWS__WAF__RateBasedRule = 'AWS::WAF::RateBasedRule'
    AWS__WAF__Rule = 'AWS::WAF::Rule'
    AWS__WAF__RuleGroup = 'AWS::WAF::RuleGroup'
    AWS__WAF__WebACL = 'AWS::WAF::WebACL'
    AWS__WAFRegional__RateBasedRule = 'AWS::WAFRegional::RateBasedRule'
    AWS__WAFRegional__Rule = 'AWS::WAFRegional::Rule'
    AWS__WAFRegional__RuleGroup = 'AWS::WAFRegional::RuleGroup'
    AWS__WAFRegional__WebACL = 'AWS::WAFRegional::WebACL'
    AWS__CloudFront__Distribution = 'AWS::CloudFront::Distribution'
    AWS__CloudFront__StreamingDistribution = 'AWS::CloudFront::StreamingDistribution'
    AWS__Lambda__Function = 'AWS::Lambda::Function'
    AWS__NetworkFirewall__Firewall = 'AWS::NetworkFirewall::Firewall'
    AWS__NetworkFirewall__FirewallPolicy = 'AWS::NetworkFirewall::FirewallPolicy'
    AWS__NetworkFirewall__RuleGroup = 'AWS::NetworkFirewall::RuleGroup'
    AWS__ElasticBeanstalk__Application = 'AWS::ElasticBeanstalk::Application'
    AWS__ElasticBeanstalk__ApplicationVersion = (
        'AWS::ElasticBeanstalk::ApplicationVersion'
    )
    AWS__ElasticBeanstalk__Environment = 'AWS::ElasticBeanstalk::Environment'
    AWS__WAFv2__WebACL = 'AWS::WAFv2::WebACL'
    AWS__WAFv2__RuleGroup = 'AWS::WAFv2::RuleGroup'
    AWS__WAFv2__IPSet = 'AWS::WAFv2::IPSet'
    AWS__WAFv2__RegexPatternSet = 'AWS::WAFv2::RegexPatternSet'
    AWS__WAFv2__ManagedRuleSet = 'AWS::WAFv2::ManagedRuleSet'
    AWS__XRay__EncryptionConfig = 'AWS::XRay::EncryptionConfig'
    AWS__SSM__AssociationCompliance = 'AWS::SSM::AssociationCompliance'
    AWS__SSM__PatchCompliance = 'AWS::SSM::PatchCompliance'
    AWS__Shield__Protection = 'AWS::Shield::Protection'
    AWS__ShieldRegional__Protection = 'AWS::ShieldRegional::Protection'
    AWS__Config__ConformancePackCompliance = 'AWS::Config::ConformancePackCompliance'
    AWS__Config__ResourceCompliance = 'AWS::Config::ResourceCompliance'
    AWS__ApiGateway__Stage = 'AWS::ApiGateway::Stage'
    AWS__ApiGateway__RestApi = 'AWS::ApiGateway::RestApi'
    AWS__ApiGatewayV2__Stage = 'AWS::ApiGatewayV2::Stage'
    AWS__ApiGatewayV2__Api = 'AWS::ApiGatewayV2::Api'
    AWS__CodePipeline__Pipeline = 'AWS::CodePipeline::Pipeline'
    AWS__ServiceCatalog__CloudFormationProvisionedProduct = (
        'AWS::ServiceCatalog::CloudFormationProvisionedProduct'
    )
    AWS__ServiceCatalog__CloudFormationProduct = (
        'AWS::ServiceCatalog::CloudFormationProduct'
    )
    AWS__ServiceCatalog__Portfolio = 'AWS::ServiceCatalog::Portfolio'
    AWS__SQS__Queue = 'AWS::SQS::Queue'
    AWS__KMS__Key = 'AWS::KMS::Key'
    AWS__QLDB__Ledger = 'AWS::QLDB::Ledger'
    AWS__SecretsManager__Secret = 'AWS::SecretsManager::Secret'
    AWS__SNS__Topic = 'AWS::SNS::Topic'
    AWS__SSM__FileData = 'AWS::SSM::FileData'
    AWS__Backup__BackupPlan = 'AWS::Backup::BackupPlan'
    AWS__Backup__BackupSelection = 'AWS::Backup::BackupSelection'
    AWS__Backup__BackupVault = 'AWS::Backup::BackupVault'
    AWS__Backup__RecoveryPoint = 'AWS::Backup::RecoveryPoint'
    AWS__ECR__Repository = 'AWS::ECR::Repository'
    AWS__ECS__Cluster = 'AWS::ECS::Cluster'
    AWS__ECS__Service = 'AWS::ECS::Service'
    AWS__ECS__TaskDefinition = 'AWS::ECS::TaskDefinition'
    AWS__EFS__AccessPoint = 'AWS::EFS::AccessPoint'
    AWS__EFS__FileSystem = 'AWS::EFS::FileSystem'
    AWS__EKS__Cluster = 'AWS::EKS::Cluster'
    AWS__OpenSearch__Domain = 'AWS::OpenSearch::Domain'
    AWS__EC2__TransitGateway = 'AWS::EC2::TransitGateway'
    AWS__Kinesis__Stream = 'AWS::Kinesis::Stream'
    AWS__Kinesis__StreamConsumer = 'AWS::Kinesis::StreamConsumer'
    AWS__CodeDeploy__Application = 'AWS::CodeDeploy::Application'
    AWS__CodeDeploy__DeploymentConfig = 'AWS::CodeDeploy::DeploymentConfig'
    AWS__CodeDeploy__DeploymentGroup = 'AWS::CodeDeploy::DeploymentGroup'
    AWS__EC2__LaunchTemplate = 'AWS::EC2::LaunchTemplate'
    AWS__ECR__PublicRepository = 'AWS::ECR::PublicRepository'
    AWS__GuardDuty__Detector = 'AWS::GuardDuty::Detector'
    AWS__EMR__SecurityConfiguration = 'AWS::EMR::SecurityConfiguration'
    AWS__SageMaker__CodeRepository = 'AWS::SageMaker::CodeRepository'
    AWS__Route53Resolver__ResolverEndpoint = 'AWS::Route53Resolver::ResolverEndpoint'
    AWS__Route53Resolver__ResolverRule = 'AWS::Route53Resolver::ResolverRule'
    AWS__Route53Resolver__ResolverRuleAssociation = (
        'AWS::Route53Resolver::ResolverRuleAssociation'
    )
    AWS__DMS__ReplicationSubnetGroup = 'AWS::DMS::ReplicationSubnetGroup'
    AWS__DMS__EventSubscription = 'AWS::DMS::EventSubscription'
    AWS__MSK__Cluster = 'AWS::MSK::Cluster'
    AWS__StepFunctions__Activity = 'AWS::StepFunctions::Activity'
    AWS__WorkSpaces__Workspace = 'AWS::WorkSpaces::Workspace'
    AWS__WorkSpaces__ConnectionAlias = 'AWS::WorkSpaces::ConnectionAlias'
    AWS__SageMaker__Model = 'AWS::SageMaker::Model'
    AWS__ElasticLoadBalancingV2__Listener = 'AWS::ElasticLoadBalancingV2::Listener'
    AWS__StepFunctions__StateMachine = 'AWS::StepFunctions::StateMachine'
    AWS__Batch__JobQueue = 'AWS::Batch::JobQueue'
    AWS__Batch__ComputeEnvironment = 'AWS::Batch::ComputeEnvironment'
    AWS__AccessAnalyzer__Analyzer = 'AWS::AccessAnalyzer::Analyzer'
    AWS__Athena__WorkGroup = 'AWS::Athena::WorkGroup'
    AWS__Athena__DataCatalog = 'AWS::Athena::DataCatalog'
    AWS__Detective__Graph = 'AWS::Detective::Graph'
    AWS__GlobalAccelerator__Accelerator = 'AWS::GlobalAccelerator::Accelerator'
    AWS__GlobalAccelerator__EndpointGroup = 'AWS::GlobalAccelerator::EndpointGroup'
    AWS__GlobalAccelerator__Listener = 'AWS::GlobalAccelerator::Listener'
    AWS__EC2__TransitGatewayAttachment = 'AWS::EC2::TransitGatewayAttachment'
    AWS__EC2__TransitGatewayRouteTable = 'AWS::EC2::TransitGatewayRouteTable'
    AWS__DMS__Certificate = 'AWS::DMS::Certificate'
    AWS__AppConfig__Application = 'AWS::AppConfig::Application'
    AWS__AppSync__GraphQLApi = 'AWS::AppSync::GraphQLApi'
    AWS__DataSync__LocationSMB = 'AWS::DataSync::LocationSMB'
    AWS__DataSync__LocationFSxLustre = 'AWS::DataSync::LocationFSxLustre'
    AWS__DataSync__LocationS3 = 'AWS::DataSync::LocationS3'
    AWS__DataSync__LocationEFS = 'AWS::DataSync::LocationEFS'
    AWS__DataSync__Task = 'AWS::DataSync::Task'
    AWS__DataSync__LocationNFS = 'AWS::DataSync::LocationNFS'
    AWS__EC2__NetworkInsightsAccessScopeAnalysis = (
        'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
    )
    AWS__EKS__FargateProfile = 'AWS::EKS::FargateProfile'
    AWS__Glue__Job = 'AWS::Glue::Job'
    AWS__GuardDuty__ThreatIntelSet = 'AWS::GuardDuty::ThreatIntelSet'
    AWS__GuardDuty__IPSet = 'AWS::GuardDuty::IPSet'
    AWS__SageMaker__Workteam = 'AWS::SageMaker::Workteam'
    AWS__SageMaker__NotebookInstanceLifecycleConfig = (
        'AWS::SageMaker::NotebookInstanceLifecycleConfig'
    )
    AWS__ServiceDiscovery__Service = 'AWS::ServiceDiscovery::Service'
    AWS__ServiceDiscovery__PublicDnsNamespace = (
        'AWS::ServiceDiscovery::PublicDnsNamespace'
    )
    AWS__SES__ContactList = 'AWS::SES::ContactList'
    AWS__SES__ConfigurationSet = 'AWS::SES::ConfigurationSet'
    AWS__Route53__HostedZone = 'AWS::Route53::HostedZone'
    AWS__IoTEvents__Input = 'AWS::IoTEvents::Input'
    AWS__IoTEvents__DetectorModel = 'AWS::IoTEvents::DetectorModel'
    AWS__IoTEvents__AlarmModel = 'AWS::IoTEvents::AlarmModel'
    AWS__ServiceDiscovery__HttpNamespace = 'AWS::ServiceDiscovery::HttpNamespace'
    AWS__Events__EventBus = 'AWS::Events::EventBus'
    AWS__ImageBuilder__ContainerRecipe = 'AWS::ImageBuilder::ContainerRecipe'
    AWS__ImageBuilder__DistributionConfiguration = (
        'AWS::ImageBuilder::DistributionConfiguration'
    )
    AWS__ImageBuilder__InfrastructureConfiguration = (
        'AWS::ImageBuilder::InfrastructureConfiguration'
    )
    AWS__DataSync__LocationObjectStorage = 'AWS::DataSync::LocationObjectStorage'
    AWS__DataSync__LocationHDFS = 'AWS::DataSync::LocationHDFS'
    AWS__Glue__Classifier = 'AWS::Glue::Classifier'
    AWS__Route53RecoveryReadiness__Cell = 'AWS::Route53RecoveryReadiness::Cell'
    AWS__Route53RecoveryReadiness__ReadinessCheck = (
        'AWS::Route53RecoveryReadiness::ReadinessCheck'
    )
    AWS__ECR__RegistryPolicy = 'AWS::ECR::RegistryPolicy'
    AWS__Backup__ReportPlan = 'AWS::Backup::ReportPlan'
    AWS__Lightsail__Certificate = 'AWS::Lightsail::Certificate'
    AWS__RUM__AppMonitor = 'AWS::RUM::AppMonitor'
    AWS__Events__Endpoint = 'AWS::Events::Endpoint'
    AWS__SES__ReceiptRuleSet = 'AWS::SES::ReceiptRuleSet'
    AWS__Events__Archive = 'AWS::Events::Archive'
    AWS__Events__ApiDestination = 'AWS::Events::ApiDestination'
    AWS__Lightsail__Disk = 'AWS::Lightsail::Disk'
    AWS__FIS__ExperimentTemplate = 'AWS::FIS::ExperimentTemplate'
    AWS__DataSync__LocationFSxWindows = 'AWS::DataSync::LocationFSxWindows'
    AWS__SES__ReceiptFilter = 'AWS::SES::ReceiptFilter'
    AWS__GuardDuty__Filter = 'AWS::GuardDuty::Filter'
    AWS__SES__Template = 'AWS::SES::Template'
    AWS__AmazonMQ__Broker = 'AWS::AmazonMQ::Broker'
    AWS__AppConfig__Environment = 'AWS::AppConfig::Environment'
    AWS__AppConfig__ConfigurationProfile = 'AWS::AppConfig::ConfigurationProfile'
    AWS__Cloud9__EnvironmentEC2 = 'AWS::Cloud9::EnvironmentEC2'
    AWS__EventSchemas__Registry = 'AWS::EventSchemas::Registry'
    AWS__EventSchemas__RegistryPolicy = 'AWS::EventSchemas::RegistryPolicy'
    AWS__EventSchemas__Discoverer = 'AWS::EventSchemas::Discoverer'
    AWS__FraudDetector__Label = 'AWS::FraudDetector::Label'
    AWS__FraudDetector__EntityType = 'AWS::FraudDetector::EntityType'
    AWS__FraudDetector__Variable = 'AWS::FraudDetector::Variable'
    AWS__FraudDetector__Outcome = 'AWS::FraudDetector::Outcome'
    AWS__IoT__Authorizer = 'AWS::IoT::Authorizer'
    AWS__IoT__SecurityProfile = 'AWS::IoT::SecurityProfile'
    AWS__IoT__RoleAlias = 'AWS::IoT::RoleAlias'
    AWS__IoT__Dimension = 'AWS::IoT::Dimension'
    AWS__IoTAnalytics__Datastore = 'AWS::IoTAnalytics::Datastore'
    AWS__Lightsail__Bucket = 'AWS::Lightsail::Bucket'
    AWS__Lightsail__StaticIp = 'AWS::Lightsail::StaticIp'
    AWS__MediaPackage__PackagingGroup = 'AWS::MediaPackage::PackagingGroup'
    AWS__Route53RecoveryReadiness__RecoveryGroup = (
        'AWS::Route53RecoveryReadiness::RecoveryGroup'
    )
    AWS__ResilienceHub__ResiliencyPolicy = 'AWS::ResilienceHub::ResiliencyPolicy'
    AWS__Transfer__Workflow = 'AWS::Transfer::Workflow'
    AWS__EKS__IdentityProviderConfig = 'AWS::EKS::IdentityProviderConfig'
    AWS__EKS__Addon = 'AWS::EKS::Addon'
    AWS__Glue__MLTransform = 'AWS::Glue::MLTransform'
    AWS__IoT__Policy = 'AWS::IoT::Policy'
    AWS__IoT__MitigationAction = 'AWS::IoT::MitigationAction'
    AWS__IoTTwinMaker__Workspace = 'AWS::IoTTwinMaker::Workspace'
    AWS__IoTTwinMaker__Entity = 'AWS::IoTTwinMaker::Entity'
    AWS__IoTAnalytics__Dataset = 'AWS::IoTAnalytics::Dataset'
    AWS__IoTAnalytics__Pipeline = 'AWS::IoTAnalytics::Pipeline'
    AWS__IoTAnalytics__Channel = 'AWS::IoTAnalytics::Channel'
    AWS__IoTSiteWise__Dashboard = 'AWS::IoTSiteWise::Dashboard'
    AWS__IoTSiteWise__Project = 'AWS::IoTSiteWise::Project'
    AWS__IoTSiteWise__Portal = 'AWS::IoTSiteWise::Portal'
    AWS__IoTSiteWise__AssetModel = 'AWS::IoTSiteWise::AssetModel'
    AWS__IVS__Channel = 'AWS::IVS::Channel'
    AWS__IVS__RecordingConfiguration = 'AWS::IVS::RecordingConfiguration'
    AWS__IVS__PlaybackKeyPair = 'AWS::IVS::PlaybackKeyPair'
    AWS__KinesisAnalyticsV2__Application = 'AWS::KinesisAnalyticsV2::Application'
    AWS__RDS__GlobalCluster = 'AWS::RDS::GlobalCluster'
    AWS__S3__MultiRegionAccessPoint = 'AWS::S3::MultiRegionAccessPoint'
    AWS__DeviceFarm__TestGridProject = 'AWS::DeviceFarm::TestGridProject'
    AWS__Budgets__BudgetsAction = 'AWS::Budgets::BudgetsAction'
    AWS__Lex__Bot = 'AWS::Lex::Bot'
    AWS__CodeGuruReviewer__RepositoryAssociation = (
        'AWS::CodeGuruReviewer::RepositoryAssociation'
    )
    AWS__IoT__CustomMetric = 'AWS::IoT::CustomMetric'
    AWS__Route53Resolver__FirewallDomainList = (
        'AWS::Route53Resolver::FirewallDomainList'
    )
    AWS__RoboMaker__RobotApplicationVersion = 'AWS::RoboMaker::RobotApplicationVersion'
    AWS__EC2__TrafficMirrorSession = 'AWS::EC2::TrafficMirrorSession'
    AWS__IoTSiteWise__Gateway = 'AWS::IoTSiteWise::Gateway'
    AWS__Lex__BotAlias = 'AWS::Lex::BotAlias'
    AWS__LookoutMetrics__Alert = 'AWS::LookoutMetrics::Alert'
    AWS__IoT__AccountAuditConfiguration = 'AWS::IoT::AccountAuditConfiguration'
    AWS__EC2__TrafficMirrorTarget = 'AWS::EC2::TrafficMirrorTarget'
    AWS__S3__StorageLens = 'AWS::S3::StorageLens'
    AWS__IoT__ScheduledAudit = 'AWS::IoT::ScheduledAudit'
    AWS__Events__Connection = 'AWS::Events::Connection'
    AWS__EventSchemas__Schema = 'AWS::EventSchemas::Schema'
    AWS__MediaPackage__PackagingConfiguration = (
        'AWS::MediaPackage::PackagingConfiguration'
    )
    AWS__KinesisVideo__SignalingChannel = 'AWS::KinesisVideo::SignalingChannel'
    AWS__AppStream__DirectoryConfig = 'AWS::AppStream::DirectoryConfig'
    AWS__LookoutVision__Project = 'AWS::LookoutVision::Project'
    AWS__Route53RecoveryControl__Cluster = 'AWS::Route53RecoveryControl::Cluster'
    AWS__Route53RecoveryControl__SafetyRule = 'AWS::Route53RecoveryControl::SafetyRule'
    AWS__Route53RecoveryControl__ControlPanel = (
        'AWS::Route53RecoveryControl::ControlPanel'
    )
    AWS__Route53RecoveryControl__RoutingControl = (
        'AWS::Route53RecoveryControl::RoutingControl'
    )
    AWS__Route53RecoveryReadiness__ResourceSet = (
        'AWS::Route53RecoveryReadiness::ResourceSet'
    )
    AWS__RoboMaker__SimulationApplication = 'AWS::RoboMaker::SimulationApplication'
    AWS__RoboMaker__RobotApplication = 'AWS::RoboMaker::RobotApplication'
    AWS__HealthLake__FHIRDatastore = 'AWS::HealthLake::FHIRDatastore'
    AWS__Pinpoint__Segment = 'AWS::Pinpoint::Segment'
    AWS__Pinpoint__ApplicationSettings = 'AWS::Pinpoint::ApplicationSettings'
    AWS__Events__Rule = 'AWS::Events::Rule'
    AWS__EC2__DHCPOptions = 'AWS::EC2::DHCPOptions'
    AWS__EC2__NetworkInsightsPath = 'AWS::EC2::NetworkInsightsPath'
    AWS__EC2__TrafficMirrorFilter = 'AWS::EC2::TrafficMirrorFilter'
    AWS__EC2__IPAM = 'AWS::EC2::IPAM'
    AWS__IoTTwinMaker__Scene = 'AWS::IoTTwinMaker::Scene'
    AWS__NetworkManager__TransitGatewayRegistration = (
        'AWS::NetworkManager::TransitGatewayRegistration'
    )
    AWS__CustomerProfiles__Domain = 'AWS::CustomerProfiles::Domain'
    AWS__AutoScaling__WarmPool = 'AWS::AutoScaling::WarmPool'
    AWS__Connect__PhoneNumber = 'AWS::Connect::PhoneNumber'


class ResourceTypeList(RootModel[List[ResourceType]]):
    root: List[ResourceType]


class ResourceTypeString(RootModel[constr(min_length=1, max_length=196)]):
    root: constr(min_length=1, max_length=196)


class ResourceValueType(Enum):
    RESOURCE_ID = 'RESOURCE_ID'


class RetentionConfigurationName(
    RootModel[constr(pattern=r'[\w\-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[\w\-]+', min_length=1, max_length=256)


class RetentionConfigurationNameList(RootModel[List[RetentionConfigurationName]]):
    root: List[RetentionConfigurationName] = Field(..., max_length=1, min_length=0)


class RetentionPeriodInDays(RootModel[conint(ge=30, le=2557)]):
    root: conint(ge=30, le=2557)


class RuleLimit(RootModel[conint(ge=0, le=50)]):
    root: conint(ge=0, le=50)


class SSMDocumentName(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.:/]{3,200}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.:/]{3,200}$')


class SSMDocumentVersion(
    RootModel[constr(pattern=r'([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)')]
):
    root: constr(pattern=r'([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)')


class SchemaVersionId(
    RootModel[constr(pattern=r'[A-Za-z0-9-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[A-Za-z0-9-]+', min_length=1, max_length=128)


class SelectAggregateResourceConfigRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Expression_1: Expression = Field(..., alias='Expression')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    MaxResults: Optional[Limit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class SelectResourceConfigRequest(BaseModel):
    Expression_1: Expression = Field(..., alias='Expression')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class SortBy(Enum):
    SCORE = 'SCORE'


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class SourceDetail(BaseModel):
    EventSource_1: Optional[EventSource] = Field(None, alias='EventSource')
    MaximumExecutionFrequency_1: Optional[MaximumExecutionFrequency] = Field(
        None, alias='MaximumExecutionFrequency'
    )
    MessageType_1: Optional[MessageType] = Field(None, alias='MessageType')


class SourceDetails(RootModel[List[SourceDetail]]):
    root: List[SourceDetail] = Field(..., max_length=25, min_length=0)


class SsmControls(BaseModel):
    ConcurrentExecutionRatePercentage: Optional[Percentage] = None
    ErrorPercentage: Optional[Percentage] = None


class StackArn(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class StartConfigRulesEvaluationRequest(BaseModel):
    ConfigRuleNames: Optional[ReevaluateConfigRuleNames] = None


class StartConfigRulesEvaluationResponse(BaseModel):
    pass


class StartConfigurationRecorderRequest(BaseModel):
    ConfigurationRecorderName: RecorderName


class StartResourceEvaluationResponse(BaseModel):
    ResourceEvaluationId_1: Optional[ResourceEvaluationId] = Field(
        None, alias='ResourceEvaluationId'
    )


class StatusDetailFilters(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    MemberAccountRuleStatus_1: Optional[MemberAccountRuleStatus] = Field(
        None, alias='MemberAccountRuleStatus'
    )


class StopConfigurationRecorderRequest(BaseModel):
    ConfigurationRecorderName: RecorderName


class StoredQuery(BaseModel):
    Description: Optional[QueryDescription] = None
    Expression: Optional[QueryExpression] = None
    QueryArn_1: Optional[QueryArn] = Field(None, alias='QueryArn')
    QueryId_1: Optional[QueryId] = Field(None, alias='QueryId')
    QueryName_1: QueryName = Field(..., alias='QueryName')


class StoredQueryMetadata(BaseModel):
    Description: Optional[QueryDescription] = None
    QueryArn_1: QueryArn = Field(..., alias='QueryArn')
    QueryId_1: QueryId = Field(..., alias='QueryId')
    QueryName_1: QueryName = Field(..., alias='QueryName')


class StoredQueryMetadataList(RootModel[List[StoredQueryMetadata]]):
    root: List[StoredQueryMetadata]


class String(RootModel[str]):
    root: str


class StringWithCharLimit1024(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class StringWithCharLimit128(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class StringWithCharLimit2048(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class StringWithCharLimit256(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class StringWithCharLimit256Min0(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class StringWithCharLimit64(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class StringWithCharLimit768(RootModel[constr(min_length=1, max_length=768)]):
    root: constr(min_length=1, max_length=768)


class SupplementaryConfigurationName(RootModel[str]):
    root: str


class SupplementaryConfigurationValue(RootModel[str]):
    root: str


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TemplateBody(RootModel[constr(min_length=1, max_length=51200)]):
    root: constr(min_length=1, max_length=51200)


class TemplateS3Uri(
    RootModel[constr(pattern=r's3://.*', min_length=1, max_length=1024)]
):
    root: constr(pattern=r's3://.*', min_length=1, max_length=1024)


class TemplateSSMDocumentDetails(BaseModel):
    DocumentName: SSMDocumentName
    DocumentVersion: Optional[SSMDocumentVersion] = None


class TimeWindow(BaseModel):
    EndTime: Optional[Date] = None
    StartTime: Optional[Date] = None


class TooManyTagsException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    TagKeys: TagKeyList


class ValidationException(RootModel[Any]):
    root: Any


class Value(RootModel[str]):
    root: str


class Version(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    StarlingDoveService_BatchGetAggregateResourceConfig = (
        'StarlingDoveService.BatchGetAggregateResourceConfig'
    )


class XAmzTarget1(Enum):
    StarlingDoveService_BatchGetResourceConfig = (
        'StarlingDoveService.BatchGetResourceConfig'
    )


class XAmzTarget2(Enum):
    StarlingDoveService_DeleteAggregationAuthorization = (
        'StarlingDoveService.DeleteAggregationAuthorization'
    )


class XAmzTarget3(Enum):
    StarlingDoveService_DeleteConfigRule = 'StarlingDoveService.DeleteConfigRule'


class XAmzTarget4(Enum):
    StarlingDoveService_DeleteConfigurationAggregator = (
        'StarlingDoveService.DeleteConfigurationAggregator'
    )


class XAmzTarget5(Enum):
    StarlingDoveService_DeleteConfigurationRecorder = (
        'StarlingDoveService.DeleteConfigurationRecorder'
    )


class XAmzTarget6(Enum):
    StarlingDoveService_DeleteConformancePack = (
        'StarlingDoveService.DeleteConformancePack'
    )


class XAmzTarget7(Enum):
    StarlingDoveService_DeleteDeliveryChannel = (
        'StarlingDoveService.DeleteDeliveryChannel'
    )


class XAmzTarget8(Enum):
    StarlingDoveService_DeleteEvaluationResults = (
        'StarlingDoveService.DeleteEvaluationResults'
    )


class XAmzTarget9(Enum):
    StarlingDoveService_DeleteOrganizationConfigRule = (
        'StarlingDoveService.DeleteOrganizationConfigRule'
    )


class XAmzTarget10(Enum):
    StarlingDoveService_DeleteOrganizationConformancePack = (
        'StarlingDoveService.DeleteOrganizationConformancePack'
    )


class XAmzTarget11(Enum):
    StarlingDoveService_DeletePendingAggregationRequest = (
        'StarlingDoveService.DeletePendingAggregationRequest'
    )


class XAmzTarget12(Enum):
    StarlingDoveService_DeleteRemediationConfiguration = (
        'StarlingDoveService.DeleteRemediationConfiguration'
    )


class XAmzTarget13(Enum):
    StarlingDoveService_DeleteRemediationExceptions = (
        'StarlingDoveService.DeleteRemediationExceptions'
    )


class XAmzTarget14(Enum):
    StarlingDoveService_DeleteResourceConfig = (
        'StarlingDoveService.DeleteResourceConfig'
    )


class XAmzTarget15(Enum):
    StarlingDoveService_DeleteRetentionConfiguration = (
        'StarlingDoveService.DeleteRetentionConfiguration'
    )


class XAmzTarget16(Enum):
    StarlingDoveService_DeleteStoredQuery = 'StarlingDoveService.DeleteStoredQuery'


class XAmzTarget17(Enum):
    StarlingDoveService_DeliverConfigSnapshot = (
        'StarlingDoveService.DeliverConfigSnapshot'
    )


class XAmzTarget18(Enum):
    StarlingDoveService_DescribeAggregateComplianceByConfigRules = (
        'StarlingDoveService.DescribeAggregateComplianceByConfigRules'
    )


class XAmzTarget19(Enum):
    StarlingDoveService_DescribeAggregateComplianceByConformancePacks = (
        'StarlingDoveService.DescribeAggregateComplianceByConformancePacks'
    )


class XAmzTarget20(Enum):
    StarlingDoveService_DescribeAggregationAuthorizations = (
        'StarlingDoveService.DescribeAggregationAuthorizations'
    )


class XAmzTarget21(Enum):
    StarlingDoveService_DescribeComplianceByConfigRule = (
        'StarlingDoveService.DescribeComplianceByConfigRule'
    )


class XAmzTarget22(Enum):
    StarlingDoveService_DescribeComplianceByResource = (
        'StarlingDoveService.DescribeComplianceByResource'
    )


class XAmzTarget23(Enum):
    StarlingDoveService_DescribeConfigRuleEvaluationStatus = (
        'StarlingDoveService.DescribeConfigRuleEvaluationStatus'
    )


class XAmzTarget24(Enum):
    StarlingDoveService_DescribeConfigRules = 'StarlingDoveService.DescribeConfigRules'


class XAmzTarget25(Enum):
    StarlingDoveService_DescribeConfigurationAggregatorSourcesStatus = (
        'StarlingDoveService.DescribeConfigurationAggregatorSourcesStatus'
    )


class XAmzTarget26(Enum):
    StarlingDoveService_DescribeConfigurationAggregators = (
        'StarlingDoveService.DescribeConfigurationAggregators'
    )


class XAmzTarget27(Enum):
    StarlingDoveService_DescribeConfigurationRecorderStatus = (
        'StarlingDoveService.DescribeConfigurationRecorderStatus'
    )


class XAmzTarget28(Enum):
    StarlingDoveService_DescribeConfigurationRecorders = (
        'StarlingDoveService.DescribeConfigurationRecorders'
    )


class XAmzTarget29(Enum):
    StarlingDoveService_DescribeConformancePackCompliance = (
        'StarlingDoveService.DescribeConformancePackCompliance'
    )


class XAmzTarget30(Enum):
    StarlingDoveService_DescribeConformancePackStatus = (
        'StarlingDoveService.DescribeConformancePackStatus'
    )


class XAmzTarget31(Enum):
    StarlingDoveService_DescribeConformancePacks = (
        'StarlingDoveService.DescribeConformancePacks'
    )


class XAmzTarget32(Enum):
    StarlingDoveService_DescribeDeliveryChannelStatus = (
        'StarlingDoveService.DescribeDeliveryChannelStatus'
    )


class XAmzTarget33(Enum):
    StarlingDoveService_DescribeDeliveryChannels = (
        'StarlingDoveService.DescribeDeliveryChannels'
    )


class XAmzTarget34(Enum):
    StarlingDoveService_DescribeOrganizationConfigRuleStatuses = (
        'StarlingDoveService.DescribeOrganizationConfigRuleStatuses'
    )


class XAmzTarget35(Enum):
    StarlingDoveService_DescribeOrganizationConfigRules = (
        'StarlingDoveService.DescribeOrganizationConfigRules'
    )


class XAmzTarget36(Enum):
    StarlingDoveService_DescribeOrganizationConformancePackStatuses = (
        'StarlingDoveService.DescribeOrganizationConformancePackStatuses'
    )


class XAmzTarget37(Enum):
    StarlingDoveService_DescribeOrganizationConformancePacks = (
        'StarlingDoveService.DescribeOrganizationConformancePacks'
    )


class XAmzTarget38(Enum):
    StarlingDoveService_DescribePendingAggregationRequests = (
        'StarlingDoveService.DescribePendingAggregationRequests'
    )


class XAmzTarget39(Enum):
    StarlingDoveService_DescribeRemediationConfigurations = (
        'StarlingDoveService.DescribeRemediationConfigurations'
    )


class XAmzTarget40(Enum):
    StarlingDoveService_DescribeRemediationExceptions = (
        'StarlingDoveService.DescribeRemediationExceptions'
    )


class XAmzTarget41(Enum):
    StarlingDoveService_DescribeRemediationExecutionStatus = (
        'StarlingDoveService.DescribeRemediationExecutionStatus'
    )


class XAmzTarget42(Enum):
    StarlingDoveService_DescribeRetentionConfigurations = (
        'StarlingDoveService.DescribeRetentionConfigurations'
    )


class XAmzTarget43(Enum):
    StarlingDoveService_GetAggregateComplianceDetailsByConfigRule = (
        'StarlingDoveService.GetAggregateComplianceDetailsByConfigRule'
    )


class XAmzTarget44(Enum):
    StarlingDoveService_GetAggregateConfigRuleComplianceSummary = (
        'StarlingDoveService.GetAggregateConfigRuleComplianceSummary'
    )


class XAmzTarget45(Enum):
    StarlingDoveService_GetAggregateConformancePackComplianceSummary = (
        'StarlingDoveService.GetAggregateConformancePackComplianceSummary'
    )


class XAmzTarget46(Enum):
    StarlingDoveService_GetAggregateDiscoveredResourceCounts = (
        'StarlingDoveService.GetAggregateDiscoveredResourceCounts'
    )


class XAmzTarget47(Enum):
    StarlingDoveService_GetAggregateResourceConfig = (
        'StarlingDoveService.GetAggregateResourceConfig'
    )


class XAmzTarget48(Enum):
    StarlingDoveService_GetComplianceDetailsByConfigRule = (
        'StarlingDoveService.GetComplianceDetailsByConfigRule'
    )


class XAmzTarget49(Enum):
    StarlingDoveService_GetComplianceDetailsByResource = (
        'StarlingDoveService.GetComplianceDetailsByResource'
    )


class XAmzTarget50(Enum):
    StarlingDoveService_GetComplianceSummaryByConfigRule = (
        'StarlingDoveService.GetComplianceSummaryByConfigRule'
    )


class XAmzTarget51(Enum):
    StarlingDoveService_GetComplianceSummaryByResourceType = (
        'StarlingDoveService.GetComplianceSummaryByResourceType'
    )


class XAmzTarget52(Enum):
    StarlingDoveService_GetConformancePackComplianceDetails = (
        'StarlingDoveService.GetConformancePackComplianceDetails'
    )


class XAmzTarget53(Enum):
    StarlingDoveService_GetConformancePackComplianceSummary = (
        'StarlingDoveService.GetConformancePackComplianceSummary'
    )


class XAmzTarget54(Enum):
    StarlingDoveService_GetCustomRulePolicy = 'StarlingDoveService.GetCustomRulePolicy'


class XAmzTarget55(Enum):
    StarlingDoveService_GetDiscoveredResourceCounts = (
        'StarlingDoveService.GetDiscoveredResourceCounts'
    )


class XAmzTarget56(Enum):
    StarlingDoveService_GetOrganizationConfigRuleDetailedStatus = (
        'StarlingDoveService.GetOrganizationConfigRuleDetailedStatus'
    )


class XAmzTarget57(Enum):
    StarlingDoveService_GetOrganizationConformancePackDetailedStatus = (
        'StarlingDoveService.GetOrganizationConformancePackDetailedStatus'
    )


class XAmzTarget58(Enum):
    StarlingDoveService_GetOrganizationCustomRulePolicy = (
        'StarlingDoveService.GetOrganizationCustomRulePolicy'
    )


class XAmzTarget59(Enum):
    StarlingDoveService_GetResourceConfigHistory = (
        'StarlingDoveService.GetResourceConfigHistory'
    )


class XAmzTarget60(Enum):
    StarlingDoveService_GetResourceEvaluationSummary = (
        'StarlingDoveService.GetResourceEvaluationSummary'
    )


class XAmzTarget61(Enum):
    StarlingDoveService_GetStoredQuery = 'StarlingDoveService.GetStoredQuery'


class XAmzTarget62(Enum):
    StarlingDoveService_ListAggregateDiscoveredResources = (
        'StarlingDoveService.ListAggregateDiscoveredResources'
    )


class XAmzTarget63(Enum):
    StarlingDoveService_ListConformancePackComplianceScores = (
        'StarlingDoveService.ListConformancePackComplianceScores'
    )


class XAmzTarget64(Enum):
    StarlingDoveService_ListDiscoveredResources = (
        'StarlingDoveService.ListDiscoveredResources'
    )


class XAmzTarget65(Enum):
    StarlingDoveService_ListResourceEvaluations = (
        'StarlingDoveService.ListResourceEvaluations'
    )


class XAmzTarget66(Enum):
    StarlingDoveService_ListStoredQueries = 'StarlingDoveService.ListStoredQueries'


class XAmzTarget67(Enum):
    StarlingDoveService_ListTagsForResource = 'StarlingDoveService.ListTagsForResource'


class XAmzTarget68(Enum):
    StarlingDoveService_PutAggregationAuthorization = (
        'StarlingDoveService.PutAggregationAuthorization'
    )


class XAmzTarget69(Enum):
    StarlingDoveService_PutConfigRule = 'StarlingDoveService.PutConfigRule'


class XAmzTarget70(Enum):
    StarlingDoveService_PutConfigurationAggregator = (
        'StarlingDoveService.PutConfigurationAggregator'
    )


class XAmzTarget71(Enum):
    StarlingDoveService_PutConfigurationRecorder = (
        'StarlingDoveService.PutConfigurationRecorder'
    )


class XAmzTarget72(Enum):
    StarlingDoveService_PutConformancePack = 'StarlingDoveService.PutConformancePack'


class XAmzTarget73(Enum):
    StarlingDoveService_PutDeliveryChannel = 'StarlingDoveService.PutDeliveryChannel'


class XAmzTarget74(Enum):
    StarlingDoveService_PutEvaluations = 'StarlingDoveService.PutEvaluations'


class XAmzTarget75(Enum):
    StarlingDoveService_PutExternalEvaluation = (
        'StarlingDoveService.PutExternalEvaluation'
    )


class XAmzTarget76(Enum):
    StarlingDoveService_PutOrganizationConfigRule = (
        'StarlingDoveService.PutOrganizationConfigRule'
    )


class XAmzTarget77(Enum):
    StarlingDoveService_PutOrganizationConformancePack = (
        'StarlingDoveService.PutOrganizationConformancePack'
    )


class XAmzTarget78(Enum):
    StarlingDoveService_PutRemediationConfigurations = (
        'StarlingDoveService.PutRemediationConfigurations'
    )


class XAmzTarget79(Enum):
    StarlingDoveService_PutRemediationExceptions = (
        'StarlingDoveService.PutRemediationExceptions'
    )


class XAmzTarget80(Enum):
    StarlingDoveService_PutResourceConfig = 'StarlingDoveService.PutResourceConfig'


class XAmzTarget81(Enum):
    StarlingDoveService_PutRetentionConfiguration = (
        'StarlingDoveService.PutRetentionConfiguration'
    )


class XAmzTarget82(Enum):
    StarlingDoveService_PutStoredQuery = 'StarlingDoveService.PutStoredQuery'


class XAmzTarget83(Enum):
    StarlingDoveService_SelectAggregateResourceConfig = (
        'StarlingDoveService.SelectAggregateResourceConfig'
    )


class XAmzTarget84(Enum):
    StarlingDoveService_SelectResourceConfig = (
        'StarlingDoveService.SelectResourceConfig'
    )


class XAmzTarget85(Enum):
    StarlingDoveService_StartConfigRulesEvaluation = (
        'StarlingDoveService.StartConfigRulesEvaluation'
    )


class XAmzTarget86(Enum):
    StarlingDoveService_StartConfigurationRecorder = (
        'StarlingDoveService.StartConfigurationRecorder'
    )


class XAmzTarget87(Enum):
    StarlingDoveService_StartRemediationExecution = (
        'StarlingDoveService.StartRemediationExecution'
    )


class XAmzTarget88(Enum):
    StarlingDoveService_StartResourceEvaluation = (
        'StarlingDoveService.StartResourceEvaluation'
    )


class XAmzTarget89(Enum):
    StarlingDoveService_StopConfigurationRecorder = (
        'StarlingDoveService.StopConfigurationRecorder'
    )


class XAmzTarget90(Enum):
    StarlingDoveService_TagResource = 'StarlingDoveService.TagResource'


class XAmzTarget91(Enum):
    StarlingDoveService_UntagResource = 'StarlingDoveService.UntagResource'


class AccountAggregationSourceAccountList(RootModel[List[AccountId]]):
    root: List[AccountId] = Field(..., min_length=1)


class AggregateConformancePackCompliance(BaseModel):
    ComplianceType: Optional[ConformancePackComplianceType] = None
    CompliantRuleCount: Optional[Integer] = None
    NonCompliantRuleCount: Optional[Integer] = None
    TotalRuleCount: Optional[Integer] = None


class AggregateConformancePackComplianceCount(BaseModel):
    CompliantConformancePackCount: Optional[Integer] = None
    NonCompliantConformancePackCount: Optional[Integer] = None


class AggregateConformancePackComplianceFilters(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    AwsRegion_1: Optional[AwsRegion] = Field(None, alias='AwsRegion')
    ComplianceType: Optional[ConformancePackComplianceType] = None
    ConformancePackName_1: Optional[ConformancePackName] = Field(
        None, alias='ConformancePackName'
    )


class AggregateConformancePackComplianceSummary(BaseModel):
    ComplianceSummary: Optional[AggregateConformancePackComplianceCount] = None
    GroupName: Optional[StringWithCharLimit256] = None


class AggregateConformancePackComplianceSummaryFilters(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    AwsRegion_1: Optional[AwsRegion] = Field(None, alias='AwsRegion')


class AggregateConformancePackComplianceSummaryList(
    RootModel[List[AggregateConformancePackComplianceSummary]]
):
    root: List[AggregateConformancePackComplianceSummary]


class AggregateResourceIdentifier(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    ResourceName_1: Optional[ResourceName] = Field(None, alias='ResourceName')
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')
    SourceAccountId: AccountId
    SourceRegion: AwsRegion


class AggregatedSourceStatus(BaseModel):
    AwsRegion_1: Optional[AwsRegion] = Field(None, alias='AwsRegion')
    LastErrorCode: Optional[String] = None
    LastErrorMessage: Optional[String] = None
    LastUpdateStatus: Optional[AggregatedSourceStatusType] = None
    LastUpdateTime: Optional[Date] = None
    SourceId: Optional[String] = None
    SourceType: Optional[AggregatedSourceType] = None


class AggregatedSourceStatusList(RootModel[List[AggregatedSourceStatus]]):
    root: List[AggregatedSourceStatus]


class AggregationAuthorization(BaseModel):
    AggregationAuthorizationArn: Optional[String] = None
    AuthorizedAccountId: Optional[AccountId] = None
    AuthorizedAwsRegion: Optional[AwsRegion] = None
    CreationTime: Optional[Date] = None


class AggregationAuthorizationList(RootModel[List[AggregationAuthorization]]):
    root: List[AggregationAuthorization]


class AggregatorRegionList(RootModel[List[String]]):
    root: List[String] = Field(..., min_length=1)


class ComplianceContributorCount(BaseModel):
    CapExceeded: Optional[Boolean] = None
    CappedCount: Optional[Integer] = None


class ComplianceResourceTypes(RootModel[List[StringWithCharLimit256]]):
    root: List[StringWithCharLimit256] = Field(..., max_length=100, min_length=0)


class ComplianceSummary(BaseModel):
    ComplianceSummaryTimestamp: Optional[Date] = None
    CompliantResourceCount: Optional[ComplianceContributorCount] = None
    NonCompliantResourceCount: Optional[ComplianceContributorCount] = None


class ComplianceSummaryByResourceType(BaseModel):
    ComplianceSummary_1: Optional[ComplianceSummary] = Field(
        None, alias='ComplianceSummary'
    )
    ResourceType: Optional[StringWithCharLimit256] = None


class ConfigExportDeliveryInfo(BaseModel):
    lastAttemptTime: Optional[Date] = None
    lastErrorCode: Optional[String] = None
    lastErrorMessage: Optional[String] = None
    lastStatus: Optional[DeliveryStatus] = None
    lastSuccessfulTime: Optional[Date] = None
    nextDeliveryTime: Optional[Date] = None


class ConfigRuleComplianceFilters(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    AwsRegion_1: Optional[AwsRegion] = Field(None, alias='AwsRegion')
    ComplianceType_1: Optional[ComplianceType] = Field(None, alias='ComplianceType')
    ConfigRuleName_1: Optional[ConfigRuleName] = Field(None, alias='ConfigRuleName')


class ConfigRuleEvaluationStatus(BaseModel):
    ConfigRuleArn: Optional[String] = None
    ConfigRuleId: Optional[String] = None
    ConfigRuleName_1: Optional[ConfigRuleName] = Field(None, alias='ConfigRuleName')
    FirstActivatedTime: Optional[Date] = None
    FirstEvaluationStarted: Optional[Boolean] = None
    LastDeactivatedTime: Optional[Date] = None
    LastDebugLogDeliveryStatus: Optional[String] = None
    LastDebugLogDeliveryStatusReason: Optional[String] = None
    LastDebugLogDeliveryTime: Optional[Date] = None
    LastErrorCode: Optional[String] = None
    LastErrorMessage: Optional[String] = None
    LastFailedEvaluationTime: Optional[Date] = None
    LastFailedInvocationTime: Optional[Date] = None
    LastSuccessfulEvaluationTime: Optional[Date] = None
    LastSuccessfulInvocationTime: Optional[Date] = None


class ConfigRuleEvaluationStatusList(RootModel[List[ConfigRuleEvaluationStatus]]):
    root: List[ConfigRuleEvaluationStatus]


class ConfigSnapshotDeliveryProperties(BaseModel):
    deliveryFrequency: Optional[MaximumExecutionFrequency] = None


class ConfigStreamDeliveryInfo(BaseModel):
    lastErrorCode: Optional[String] = None
    lastErrorMessage: Optional[String] = None
    lastStatus: Optional[DeliveryStatus] = None
    lastStatusChangeTime: Optional[Date] = None


class ConfigurationRecorderNameList(RootModel[List[RecorderName]]):
    root: List[RecorderName]


class ConfigurationRecorderStatus(BaseModel):
    lastErrorCode: Optional[String] = None
    lastErrorMessage: Optional[String] = None
    lastStartTime: Optional[Date] = None
    lastStatus: Optional[RecorderStatus] = None
    lastStatusChangeTime: Optional[Date] = None
    lastStopTime: Optional[Date] = None
    name: Optional[String] = None
    recording: Optional[Boolean] = None


class ConfigurationRecorderStatusList(RootModel[List[ConfigurationRecorderStatus]]):
    root: List[ConfigurationRecorderStatus]


class ConformancePackComplianceResourceIds(RootModel[List[StringWithCharLimit256]]):
    root: List[StringWithCharLimit256] = Field(..., max_length=5, min_length=0)


class ConformancePackComplianceScore(BaseModel):
    ConformancePackName_1: Optional[ConformancePackName] = Field(
        None, alias='ConformancePackName'
    )
    LastUpdatedTime_1: Optional[LastUpdatedTime] = Field(None, alias='LastUpdatedTime')
    Score: Optional[ComplianceScore] = None


class ConformancePackComplianceScores(RootModel[List[ConformancePackComplianceScore]]):
    root: List[ConformancePackComplianceScore]


class ConformancePackComplianceScoresFilters(BaseModel):
    ConformancePackNames: ConformancePackNameFilter


class ConformancePackComplianceSummary(BaseModel):
    ConformancePackComplianceStatus: ConformancePackComplianceType
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')


class ConformancePackComplianceSummaryList(
    RootModel[List[ConformancePackComplianceSummary]]
):
    root: List[ConformancePackComplianceSummary] = Field(
        ..., max_length=5, min_length=1
    )


class ConformancePackConfigRuleNames(RootModel[List[StringWithCharLimit64]]):
    root: List[StringWithCharLimit64] = Field(..., max_length=10, min_length=0)


class ConformancePackEvaluationFilters(BaseModel):
    ComplianceType: Optional[ConformancePackComplianceType] = None
    ConfigRuleNames: Optional[ConformancePackConfigRuleNames] = None
    ResourceIds: Optional[ConformancePackComplianceResourceIds] = None
    ResourceType: Optional[StringWithCharLimit256] = None


class ConformancePackInputParameter(BaseModel):
    ParameterName_1: ParameterName = Field(..., alias='ParameterName')
    ParameterValue_1: ParameterValue = Field(..., alias='ParameterValue')


class ConformancePackInputParameters(RootModel[List[ConformancePackInputParameter]]):
    root: List[ConformancePackInputParameter] = Field(..., max_length=60, min_length=0)


class ConformancePackStatusDetail(BaseModel):
    ConformancePackArn_1: ConformancePackArn = Field(..., alias='ConformancePackArn')
    ConformancePackId_1: ConformancePackId = Field(..., alias='ConformancePackId')
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')
    ConformancePackState_1: ConformancePackState = Field(
        ..., alias='ConformancePackState'
    )
    ConformancePackStatusReason_1: Optional[ConformancePackStatusReason] = Field(
        None, alias='ConformancePackStatusReason'
    )
    LastUpdateCompletedTime: Optional[Date] = None
    LastUpdateRequestedTime: Date
    StackArn_1: StackArn = Field(..., alias='StackArn')


class ConformancePackStatusDetailsList(RootModel[List[ConformancePackStatusDetail]]):
    root: List[ConformancePackStatusDetail] = Field(..., max_length=25, min_length=0)


class ControlsList(RootModel[List[StringWithCharLimit128]]):
    root: List[StringWithCharLimit128] = Field(..., max_length=20, min_length=0)


class CustomPolicyDetails(BaseModel):
    EnableDebugLogDelivery: Optional[Boolean] = None
    PolicyRuntime_1: PolicyRuntime = Field(..., alias='PolicyRuntime')
    PolicyText_1: PolicyText = Field(..., alias='PolicyText')


class DeleteConfigurationRecorderRequest(BaseModel):
    ConfigurationRecorderName: RecorderName


class DeleteEvaluationResultsRequest(BaseModel):
    ConfigRuleName: StringWithCharLimit64


class DeleteOrganizationConfigRuleRequest(BaseModel):
    OrganizationConfigRuleName_1: OrganizationConfigRuleName = Field(
        ..., alias='OrganizationConfigRuleName'
    )


class DeleteOrganizationConformancePackRequest(BaseModel):
    OrganizationConformancePackName_1: OrganizationConformancePackName = Field(
        ..., alias='OrganizationConformancePackName'
    )


class DeleteRemediationConfigurationRequest(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    ResourceType: Optional[String] = None


class DeleteResourceConfigRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    ResourceType: ResourceTypeString


class DeleteRetentionConfigurationRequest(BaseModel):
    RetentionConfigurationName_1: RetentionConfigurationName = Field(
        ..., alias='RetentionConfigurationName'
    )


class DeleteStoredQueryRequest(BaseModel):
    QueryName_1: QueryName = Field(..., alias='QueryName')


class DeliverConfigSnapshotResponse(BaseModel):
    configSnapshotId: Optional[String] = None


class DeliveryChannel(BaseModel):
    configSnapshotDeliveryProperties: Optional[ConfigSnapshotDeliveryProperties] = None
    name: Optional[ChannelName] = None
    s3BucketName: Optional[String] = None
    s3KeyPrefix: Optional[String] = None
    s3KmsKeyArn: Optional[String] = None
    snsTopicARN: Optional[String] = None


class DeliveryChannelList(RootModel[List[DeliveryChannel]]):
    root: List[DeliveryChannel]


class DeliveryChannelStatus(BaseModel):
    configHistoryDeliveryInfo: Optional[ConfigExportDeliveryInfo] = None
    configSnapshotDeliveryInfo: Optional[ConfigExportDeliveryInfo] = None
    configStreamDeliveryInfo: Optional[ConfigStreamDeliveryInfo] = None
    name: Optional[String] = None


class DeliveryChannelStatusList(RootModel[List[DeliveryChannelStatus]]):
    root: List[DeliveryChannelStatus]


class DescribeAggregateComplianceByConfigRulesRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Filters: Optional[ConfigRuleComplianceFilters] = None
    Limit: Optional[GroupByAPILimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAggregateComplianceByConformancePacksRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Filters: Optional[AggregateConformancePackComplianceFilters] = None
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAggregationAuthorizationsRequest(BaseModel):
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken: Optional[String] = None


class DescribeAggregationAuthorizationsResponse(BaseModel):
    AggregationAuthorizations: Optional[AggregationAuthorizationList] = None
    NextToken: Optional[String] = None


class DescribeComplianceByConfigRuleRequest(BaseModel):
    ComplianceTypes_1: Optional[ComplianceTypes] = Field(None, alias='ComplianceTypes')
    ConfigRuleNames_1: Optional[ConfigRuleNames] = Field(None, alias='ConfigRuleNames')
    NextToken: Optional[String] = None


class DescribeComplianceByResourceRequest(BaseModel):
    ComplianceTypes_1: Optional[ComplianceTypes] = Field(None, alias='ComplianceTypes')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceId: Optional[BaseResourceId] = None
    ResourceType: Optional[StringWithCharLimit256] = None


class DescribeConfigRuleEvaluationStatusRequest(BaseModel):
    ConfigRuleNames_1: Optional[ConfigRuleNames] = Field(None, alias='ConfigRuleNames')
    Limit: Optional[RuleLimit] = None
    NextToken: Optional[String] = None


class DescribeConfigRuleEvaluationStatusResponse(BaseModel):
    ConfigRulesEvaluationStatus: Optional[ConfigRuleEvaluationStatusList] = None
    NextToken: Optional[String] = None


class DescribeConfigRulesFilters(BaseModel):
    EvaluationMode_1: Optional[EvaluationMode] = Field(None, alias='EvaluationMode')


class DescribeConfigRulesRequest(BaseModel):
    ConfigRuleNames_1: Optional[ConfigRuleNames] = Field(None, alias='ConfigRuleNames')
    Filters: Optional[DescribeConfigRulesFilters] = None
    NextToken: Optional[String] = None


class DescribeConfigurationAggregatorSourcesStatusRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken: Optional[String] = None
    UpdateStatus: Optional[AggregatedSourceStatusTypeList] = None


class DescribeConfigurationAggregatorSourcesStatusResponse(BaseModel):
    AggregatedSourceStatusList_1: Optional[AggregatedSourceStatusList] = Field(
        None, alias='AggregatedSourceStatusList'
    )
    NextToken: Optional[String] = None


class DescribeConfigurationAggregatorsRequest(BaseModel):
    ConfigurationAggregatorNames: Optional[ConfigurationAggregatorNameList] = None
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken: Optional[String] = None


class DescribeConfigurationRecorderStatusRequest(BaseModel):
    ConfigurationRecorderNames: Optional[ConfigurationRecorderNameList] = None


class DescribeConfigurationRecorderStatusResponse(BaseModel):
    ConfigurationRecordersStatus: Optional[ConfigurationRecorderStatusList] = None


class DescribeConfigurationRecordersRequest(BaseModel):
    ConfigurationRecorderNames: Optional[ConfigurationRecorderNameList] = None


class DescribeConformancePackStatusRequest(BaseModel):
    ConformancePackNames: Optional[ConformancePackNamesList] = None
    Limit: Optional[PageSizeLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeConformancePackStatusResponse(BaseModel):
    ConformancePackStatusDetails: Optional[ConformancePackStatusDetailsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeConformancePacksRequest(BaseModel):
    ConformancePackNames: Optional[ConformancePackNamesList] = None
    Limit: Optional[PageSizeLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeDeliveryChannelStatusResponse(BaseModel):
    DeliveryChannelsStatus: Optional[DeliveryChannelStatusList] = None


class DescribeDeliveryChannelsResponse(BaseModel):
    DeliveryChannels: Optional[DeliveryChannelList] = None


class DescribeOrganizationConformancePackStatusesRequest(BaseModel):
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None
    OrganizationConformancePackNames_1: Optional[OrganizationConformancePackNames] = (
        Field(None, alias='OrganizationConformancePackNames')
    )


class DescribeOrganizationConformancePacksRequest(BaseModel):
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None
    OrganizationConformancePackNames_1: Optional[OrganizationConformancePackNames] = (
        Field(None, alias='OrganizationConformancePackNames')
    )


class DescribePendingAggregationRequestsRequest(BaseModel):
    Limit: Optional[DescribePendingAggregationRequestsLimit] = None
    NextToken: Optional[String] = None


class DescribePendingAggregationRequestsResponse(BaseModel):
    NextToken: Optional[String] = None
    PendingAggregationRequests: Optional[PendingAggregationRequestList] = None


class DescribeRetentionConfigurationsRequest(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RetentionConfigurationNames: Optional[RetentionConfigurationNameList] = None


class DiscoveredResourceIdentifierList(RootModel[List[AggregateResourceIdentifier]]):
    root: List[AggregateResourceIdentifier]


class Evaluation(BaseModel):
    Annotation: Optional[StringWithCharLimit256] = None
    ComplianceResourceId: BaseResourceId
    ComplianceResourceType: StringWithCharLimit256
    ComplianceType_1: ComplianceType = Field(..., alias='ComplianceType')
    OrderingTimestamp_1: OrderingTimestamp = Field(..., alias='OrderingTimestamp')


class EvaluationContext(BaseModel):
    EvaluationContextIdentifier_1: Optional[EvaluationContextIdentifier] = Field(
        None, alias='EvaluationContextIdentifier'
    )


class EvaluationResultQualifier(BaseModel):
    ConfigRuleName_1: Optional[ConfigRuleName] = Field(None, alias='ConfigRuleName')
    EvaluationMode_1: Optional[EvaluationMode] = Field(None, alias='EvaluationMode')
    ResourceId: Optional[BaseResourceId] = None
    ResourceType: Optional[StringWithCharLimit256] = None


class EvaluationStatus(BaseModel):
    FailureReason: Optional[StringWithCharLimit1024] = None
    Status: ResourceEvaluationStatus


class Evaluations(RootModel[List[Evaluation]]):
    root: List[Evaluation] = Field(..., max_length=100, min_length=0)


class ExecutionControls(BaseModel):
    SsmControls_1: Optional[SsmControls] = Field(None, alias='SsmControls')


class ExternalEvaluation(BaseModel):
    Annotation: Optional[StringWithCharLimit256] = None
    ComplianceResourceId: BaseResourceId
    ComplianceResourceType: StringWithCharLimit256
    ComplianceType_1: ComplianceType = Field(..., alias='ComplianceType')
    OrderingTimestamp_1: OrderingTimestamp = Field(..., alias='OrderingTimestamp')


class FieldInfo(BaseModel):
    Name: Optional[FieldName] = None


class FieldInfoList(RootModel[List[FieldInfo]]):
    root: List[FieldInfo]


class GetAggregateComplianceDetailsByConfigRuleRequest(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    AwsRegion_1: AwsRegion = Field(..., alias='AwsRegion')
    ComplianceType_1: Optional[ComplianceType] = Field(None, alias='ComplianceType')
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetAggregateConfigRuleComplianceSummaryRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Filters: Optional[ConfigRuleComplianceSummaryFilters] = None
    GroupByKey: Optional[ConfigRuleComplianceSummaryGroupKey] = None
    Limit: Optional[GroupByAPILimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetAggregateConformancePackComplianceSummaryRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Filters: Optional[AggregateConformancePackComplianceSummaryFilters] = None
    GroupByKey: Optional[AggregateConformancePackComplianceSummaryGroupKey] = None
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetAggregateConformancePackComplianceSummaryResponse(BaseModel):
    AggregateConformancePackComplianceSummaries: Optional[
        AggregateConformancePackComplianceSummaryList
    ] = None
    GroupByKey: Optional[StringWithCharLimit256] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetAggregateResourceConfigRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    ResourceIdentifier: AggregateResourceIdentifier


class GetComplianceDetailsByConfigRuleRequest(BaseModel):
    ComplianceTypes_1: Optional[ComplianceTypes] = Field(None, alias='ComplianceTypes')
    ConfigRuleName: StringWithCharLimit64
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetComplianceDetailsByResourceRequest(BaseModel):
    ComplianceTypes_1: Optional[ComplianceTypes] = Field(None, alias='ComplianceTypes')
    NextToken: Optional[String] = None
    ResourceEvaluationId_1: Optional[ResourceEvaluationId] = Field(
        None, alias='ResourceEvaluationId'
    )
    ResourceId: Optional[BaseResourceId] = None
    ResourceType: Optional[StringWithCharLimit256] = None


class GetComplianceSummaryByConfigRuleResponse(BaseModel):
    ComplianceSummary_1: Optional[ComplianceSummary] = Field(
        None, alias='ComplianceSummary'
    )


class GetConformancePackComplianceDetailsRequest(BaseModel):
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')
    Filters: Optional[ConformancePackEvaluationFilters] = None
    Limit: Optional[GetConformancePackComplianceDetailsLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetConformancePackComplianceSummaryRequest(BaseModel):
    ConformancePackNames: ConformancePackNamesToSummarizeList
    Limit: Optional[PageSizeLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetConformancePackComplianceSummaryResponse(BaseModel):
    ConformancePackComplianceSummaryList_1: Optional[
        ConformancePackComplianceSummaryList
    ] = Field(None, alias='ConformancePackComplianceSummaryList')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetCustomRulePolicyResponse(BaseModel):
    PolicyText_1: Optional[PolicyText] = Field(None, alias='PolicyText')


class GetOrganizationConfigRuleDetailedStatusRequest(BaseModel):
    Filters: Optional[StatusDetailFilters] = None
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None
    OrganizationConfigRuleName_1: OrganizationConfigRuleName = Field(
        ..., alias='OrganizationConfigRuleName'
    )


class GetOrganizationConformancePackDetailedStatusRequest(BaseModel):
    Filters: Optional[OrganizationResourceDetailedStatusFilters] = None
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None
    OrganizationConformancePackName_1: OrganizationConformancePackName = Field(
        ..., alias='OrganizationConformancePackName'
    )


class GetOrganizationCustomRulePolicyRequest(BaseModel):
    OrganizationConfigRuleName_1: OrganizationConfigRuleName = Field(
        ..., alias='OrganizationConfigRuleName'
    )


class GetOrganizationCustomRulePolicyResponse(BaseModel):
    PolicyText_1: Optional[PolicyText] = Field(None, alias='PolicyText')


class GetResourceConfigHistoryRequest(BaseModel):
    chronologicalOrder: Optional[ChronologicalOrder] = None
    earlierTime: Optional[EarlierTime] = None
    laterTime: Optional[LaterTime] = None
    limit: Optional[Limit] = None
    nextToken: Optional[NextToken] = None
    resourceId: ResourceId
    resourceType: ResourceType


class GetResourceEvaluationSummaryRequest(BaseModel):
    ResourceEvaluationId_1: ResourceEvaluationId = Field(
        ..., alias='ResourceEvaluationId'
    )


class GetStoredQueryRequest(BaseModel):
    QueryName_1: QueryName = Field(..., alias='QueryName')


class GetStoredQueryResponse(BaseModel):
    StoredQuery_1: Optional[StoredQuery] = Field(None, alias='StoredQuery')


class GroupedResourceCount(BaseModel):
    GroupName: StringWithCharLimit256
    ResourceCount: Long


class GroupedResourceCountList(RootModel[List[GroupedResourceCount]]):
    root: List[GroupedResourceCount]


class ListAggregateDiscoveredResourcesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceIdentifiers: Optional[DiscoveredResourceIdentifierList] = None


class ListConformancePackComplianceScoresRequest(BaseModel):
    Filters: Optional[ConformancePackComplianceScoresFilters] = None
    Limit: Optional[PageSizeLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy_1: Optional[SortBy] = Field(None, alias='SortBy')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListConformancePackComplianceScoresResponse(BaseModel):
    ConformancePackComplianceScores_1: ConformancePackComplianceScores = Field(
        ..., alias='ConformancePackComplianceScores'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDiscoveredResourcesRequest(BaseModel):
    includeDeletedResources: Optional[Boolean] = None
    limit: Optional[Limit] = None
    nextToken: Optional[NextToken] = None
    resourceIds: Optional[ResourceIdList] = None
    resourceName: Optional[ResourceName] = None
    resourceType: ResourceType


class ListStoredQueriesRequest(BaseModel):
    MaxResults: Optional[Limit] = None
    NextToken: Optional[String] = None


class ListStoredQueriesResponse(BaseModel):
    NextToken: Optional[String] = None
    StoredQueryMetadata: Optional[StoredQueryMetadataList] = None


class ListTagsForResourceRequest(BaseModel):
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceArn: AmazonResourceName


class MemberAccountStatus(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    ConfigRuleName: StringWithCharLimit64
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LastUpdateTime: Optional[Date] = None
    MemberAccountRuleStatus_1: MemberAccountRuleStatus = Field(
        ..., alias='MemberAccountRuleStatus'
    )


class OrganizationAggregationSource(BaseModel):
    AllAwsRegions: Optional[Boolean] = None
    AwsRegions: Optional[AggregatorRegionList] = None
    RoleArn: String


class OrganizationConfigRuleDetailedStatus(RootModel[List[MemberAccountStatus]]):
    root: List[MemberAccountStatus]


class OrganizationConfigRuleNames(RootModel[List[StringWithCharLimit64]]):
    root: List[StringWithCharLimit64] = Field(..., max_length=25, min_length=0)


class OrganizationConfigRuleStatus(BaseModel):
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LastUpdateTime: Optional[Date] = None
    OrganizationConfigRuleName_1: OrganizationConfigRuleName = Field(
        ..., alias='OrganizationConfigRuleName'
    )
    OrganizationRuleStatus_1: OrganizationRuleStatus = Field(
        ..., alias='OrganizationRuleStatus'
    )


class OrganizationConfigRuleStatuses(RootModel[List[OrganizationConfigRuleStatus]]):
    root: List[OrganizationConfigRuleStatus]


class OrganizationConformancePack(BaseModel):
    ConformancePackInputParameters_1: Optional[ConformancePackInputParameters] = Field(
        None, alias='ConformancePackInputParameters'
    )
    DeliveryS3Bucket_1: Optional[DeliveryS3Bucket] = Field(
        None, alias='DeliveryS3Bucket'
    )
    DeliveryS3KeyPrefix_1: Optional[DeliveryS3KeyPrefix] = Field(
        None, alias='DeliveryS3KeyPrefix'
    )
    ExcludedAccounts_1: Optional[ExcludedAccounts] = Field(
        None, alias='ExcludedAccounts'
    )
    LastUpdateTime: Date
    OrganizationConformancePackArn: StringWithCharLimit256
    OrganizationConformancePackName_1: OrganizationConformancePackName = Field(
        ..., alias='OrganizationConformancePackName'
    )


class OrganizationConformancePackDetailedStatus(BaseModel):
    AccountId_1: AccountId = Field(..., alias='AccountId')
    ConformancePackName: StringWithCharLimit256
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LastUpdateTime: Optional[Date] = None
    Status: OrganizationResourceDetailedStatus


class OrganizationConformancePackDetailedStatuses(
    RootModel[List[OrganizationConformancePackDetailedStatus]]
):
    root: List[OrganizationConformancePackDetailedStatus]


class OrganizationConformancePackStatus(BaseModel):
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LastUpdateTime: Optional[Date] = None
    OrganizationConformancePackName_1: OrganizationConformancePackName = Field(
        ..., alias='OrganizationConformancePackName'
    )
    Status: OrganizationResourceStatus


class OrganizationConformancePackStatuses(
    RootModel[List[OrganizationConformancePackStatus]]
):
    root: List[OrganizationConformancePackStatus]


class OrganizationConformancePacks(RootModel[List[OrganizationConformancePack]]):
    root: List[OrganizationConformancePack]


class PutAggregationAuthorizationResponse(BaseModel):
    AggregationAuthorization_1: Optional[AggregationAuthorization] = Field(
        None, alias='AggregationAuthorization'
    )


class PutConformancePackRequest(BaseModel):
    ConformancePackInputParameters_1: Optional[ConformancePackInputParameters] = Field(
        None, alias='ConformancePackInputParameters'
    )
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')
    DeliveryS3Bucket_1: Optional[DeliveryS3Bucket] = Field(
        None, alias='DeliveryS3Bucket'
    )
    DeliveryS3KeyPrefix_1: Optional[DeliveryS3KeyPrefix] = Field(
        None, alias='DeliveryS3KeyPrefix'
    )
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateS3Uri_1: Optional[TemplateS3Uri] = Field(None, alias='TemplateS3Uri')
    TemplateSSMDocumentDetails_1: Optional[TemplateSSMDocumentDetails] = Field(
        None, alias='TemplateSSMDocumentDetails'
    )


class PutDeliveryChannelRequest(BaseModel):
    DeliveryChannel_1: DeliveryChannel = Field(..., alias='DeliveryChannel')


class PutEvaluationsRequest(BaseModel):
    Evaluations_1: Optional[Evaluations] = Field(None, alias='Evaluations')
    ResultToken: String
    TestMode: Optional[Boolean] = None


class PutEvaluationsResponse(BaseModel):
    FailedEvaluations: Optional[Evaluations] = None


class PutExternalEvaluationRequest(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    ExternalEvaluation_1: ExternalEvaluation = Field(..., alias='ExternalEvaluation')


class PutOrganizationConfigRuleResponse(BaseModel):
    OrganizationConfigRuleArn: Optional[StringWithCharLimit256] = None


class PutOrganizationConformancePackRequest(BaseModel):
    ConformancePackInputParameters_1: Optional[ConformancePackInputParameters] = Field(
        None, alias='ConformancePackInputParameters'
    )
    DeliveryS3Bucket_1: Optional[DeliveryS3Bucket] = Field(
        None, alias='DeliveryS3Bucket'
    )
    DeliveryS3KeyPrefix_1: Optional[DeliveryS3KeyPrefix] = Field(
        None, alias='DeliveryS3KeyPrefix'
    )
    ExcludedAccounts_1: Optional[ExcludedAccounts] = Field(
        None, alias='ExcludedAccounts'
    )
    OrganizationConformancePackName_1: OrganizationConformancePackName = Field(
        ..., alias='OrganizationConformancePackName'
    )
    TemplateBody_1: Optional[TemplateBody] = Field(None, alias='TemplateBody')
    TemplateS3Uri_1: Optional[TemplateS3Uri] = Field(None, alias='TemplateS3Uri')


class PutOrganizationConformancePackResponse(BaseModel):
    OrganizationConformancePackArn: Optional[StringWithCharLimit256] = None


class PutRetentionConfigurationRequest(BaseModel):
    RetentionPeriodInDays_1: RetentionPeriodInDays = Field(
        ..., alias='RetentionPeriodInDays'
    )


class PutStoredQueryResponse(BaseModel):
    QueryArn_1: Optional[QueryArn] = Field(None, alias='QueryArn')


class QueryInfo(BaseModel):
    SelectFields: Optional[FieldInfoList] = None


class RecordingGroup(BaseModel):
    allSupported: Optional[AllSupported] = None
    includeGlobalResourceTypes: Optional[IncludeGlobalResourceTypes] = None
    resourceTypes: Optional[ResourceTypeList] = None


class Relationship(BaseModel):
    relationshipName: Optional[RelationshipName] = None
    resourceId: Optional[ResourceId] = None
    resourceName: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None


class RelationshipList(RootModel[List[Relationship]]):
    root: List[Relationship]


class RemediationException(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    ExpirationTime: Optional[Date] = None
    Message: Optional[StringWithCharLimit1024] = None
    ResourceId: StringWithCharLimit1024
    ResourceType: StringWithCharLimit256


class RemediationExceptionResourceKey(BaseModel):
    ResourceId: Optional[StringWithCharLimit1024] = None
    ResourceType: Optional[StringWithCharLimit256] = None


class RemediationExceptionResourceKeys(
    RootModel[List[RemediationExceptionResourceKey]]
):
    root: List[RemediationExceptionResourceKey] = Field(
        ..., max_length=100, min_length=1
    )


class RemediationExceptions(RootModel[List[RemediationException]]):
    root: List[RemediationException] = Field(..., max_length=25, min_length=0)


class RemediationExecutionStep(BaseModel):
    ErrorMessage: Optional[String] = None
    Name: Optional[String] = None
    StartTime: Optional[Date] = None
    State: Optional[RemediationExecutionStepState] = None
    StopTime: Optional[Date] = None


class RemediationExecutionSteps(RootModel[List[RemediationExecutionStep]]):
    root: List[RemediationExecutionStep]


class ResourceCount(BaseModel):
    count: Optional[Long] = None
    resourceType: Optional[ResourceType] = None


class ResourceCountFilters(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    Region: Optional[AwsRegion] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class ResourceCounts(RootModel[List[ResourceCount]]):
    root: List[ResourceCount]


class ResourceDetails(BaseModel):
    ResourceConfiguration_1: ResourceConfiguration = Field(
        ..., alias='ResourceConfiguration'
    )
    ResourceConfigurationSchemaType_1: Optional[ResourceConfigurationSchemaType] = (
        Field(None, alias='ResourceConfigurationSchemaType')
    )
    ResourceId: BaseResourceId
    ResourceType: StringWithCharLimit256


class ResourceEvaluation(BaseModel):
    EvaluationMode_1: Optional[EvaluationMode] = Field(None, alias='EvaluationMode')
    EvaluationStartTimestamp: Optional[Date] = None
    ResourceEvaluationId_1: Optional[ResourceEvaluationId] = Field(
        None, alias='ResourceEvaluationId'
    )


class ResourceEvaluationFilters(BaseModel):
    EvaluationContextIdentifier_1: Optional[EvaluationContextIdentifier] = Field(
        None, alias='EvaluationContextIdentifier'
    )
    EvaluationMode_1: Optional[EvaluationMode] = Field(None, alias='EvaluationMode')
    TimeWindow_1: Optional[TimeWindow] = Field(None, alias='TimeWindow')


class ResourceEvaluations(RootModel[List[ResourceEvaluation]]):
    root: List[ResourceEvaluation]


class ResourceFilters(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    Region: Optional[AwsRegion] = None
    ResourceId_1: Optional[ResourceId] = Field(None, alias='ResourceId')
    ResourceName_1: Optional[ResourceName] = Field(None, alias='ResourceName')


class ResourceIdentifier(BaseModel):
    resourceDeletionTime: Optional[ResourceDeletionTime] = None
    resourceId: Optional[ResourceId] = None
    resourceName: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None


class ResourceIdentifierList(RootModel[List[ResourceIdentifier]]):
    root: List[ResourceIdentifier]


class ResourceIdentifiersList(RootModel[List[AggregateResourceIdentifier]]):
    root: List[AggregateResourceIdentifier] = Field(..., max_length=100, min_length=1)


class ResourceKey(BaseModel):
    resourceId: ResourceId
    resourceType: ResourceType


class ResourceKeys(RootModel[List[ResourceKey]]):
    root: List[ResourceKey] = Field(..., max_length=100, min_length=1)


class ResourceTypes(RootModel[List[StringWithCharLimit256]]):
    root: List[StringWithCharLimit256] = Field(..., max_length=20, min_length=0)


class ResourceTypesScope(RootModel[List[StringWithCharLimit256]]):
    root: List[StringWithCharLimit256] = Field(..., max_length=100, min_length=0)


class ResourceValue(BaseModel):
    Value: ResourceValueType


class Results(RootModel[List[String]]):
    root: List[String]


class RetentionConfiguration(BaseModel):
    Name: RetentionConfigurationName
    RetentionPeriodInDays_1: RetentionPeriodInDays = Field(
        ..., alias='RetentionPeriodInDays'
    )


class RetentionConfigurationList(RootModel[List[RetentionConfiguration]]):
    root: List[RetentionConfiguration]


class Scope(BaseModel):
    ComplianceResourceId: Optional[BaseResourceId] = None
    ComplianceResourceTypes_1: Optional[ComplianceResourceTypes] = Field(
        None, alias='ComplianceResourceTypes'
    )
    TagKey: Optional[StringWithCharLimit128] = None
    TagValue: Optional[StringWithCharLimit256] = None


class SelectAggregateResourceConfigResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    QueryInfo_1: Optional[QueryInfo] = Field(None, alias='QueryInfo')
    Results_1: Optional[Results] = Field(None, alias='Results')


class SelectResourceConfigResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    QueryInfo_1: Optional[QueryInfo] = Field(None, alias='QueryInfo')
    Results_1: Optional[Results] = Field(None, alias='Results')


class Source(BaseModel):
    CustomPolicyDetails_1: Optional[CustomPolicyDetails] = Field(
        None, alias='CustomPolicyDetails'
    )
    Owner_1: Owner = Field(..., alias='Owner')
    SourceDetails_1: Optional[SourceDetails] = Field(None, alias='SourceDetails')
    SourceIdentifier: Optional[StringWithCharLimit256] = None


class StartRemediationExecutionRequest(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    ResourceKeys_1: ResourceKeys = Field(..., alias='ResourceKeys')


class StartRemediationExecutionResponse(BaseModel):
    FailedItems: Optional[ResourceKeys] = None
    FailureMessage: Optional[String] = None


class StartResourceEvaluationRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    EvaluationContext_1: Optional[EvaluationContext] = Field(
        None, alias='EvaluationContext'
    )
    EvaluationMode_1: EvaluationMode = Field(..., alias='EvaluationMode')
    EvaluationTimeout_1: Optional[EvaluationTimeout] = Field(
        None, alias='EvaluationTimeout'
    )
    ResourceDetails_1: ResourceDetails = Field(..., alias='ResourceDetails')


class StaticParameterValues(RootModel[List[StringWithCharLimit256]]):
    root: List[StringWithCharLimit256] = Field(..., max_length=25, min_length=0)


class StaticValue(BaseModel):
    Values: StaticParameterValues


class SupplementaryConfiguration(
    RootModel[Optional[Dict[str, SupplementaryConfigurationValue]]]
):
    root: Optional[Dict[str, SupplementaryConfigurationValue]] = None


class Tag(BaseModel):
    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=1)


class TagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    Tags: TagList


class Tags(RootModel[Optional[Dict[str, Value]]]):
    root: Optional[Dict[str, Value]] = None


class TagsList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=0)


class UnprocessedResourceIdentifierList(RootModel[List[AggregateResourceIdentifier]]):
    root: List[AggregateResourceIdentifier]


class AccountAggregationSource(BaseModel):
    AccountIds: AccountAggregationSourceAccountList
    AllAwsRegions: Optional[Boolean] = None
    AwsRegions: Optional[AggregatorRegionList] = None


class AccountAggregationSourceList(RootModel[List[AccountAggregationSource]]):
    root: List[AccountAggregationSource] = Field(..., max_length=1, min_length=0)


class AggregateComplianceByConformancePack(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    AwsRegion_1: Optional[AwsRegion] = Field(None, alias='AwsRegion')
    Compliance: Optional[AggregateConformancePackCompliance] = None
    ConformancePackName_1: Optional[ConformancePackName] = Field(
        None, alias='ConformancePackName'
    )


class AggregateComplianceByConformancePackList(
    RootModel[List[AggregateComplianceByConformancePack]]
):
    root: List[AggregateComplianceByConformancePack]


class AggregateComplianceCount(BaseModel):
    ComplianceSummary_1: Optional[ComplianceSummary] = Field(
        None, alias='ComplianceSummary'
    )
    GroupName: Optional[StringWithCharLimit256] = None


class AggregateComplianceCountList(RootModel[List[AggregateComplianceCount]]):
    root: List[AggregateComplianceCount]


class BaseConfigurationItem(BaseModel):
    accountId: Optional[AccountId] = None
    arn: Optional[ARN] = None
    availabilityZone: Optional[AvailabilityZone] = None
    awsRegion: Optional[AwsRegion] = None
    configuration: Optional[Configuration] = None
    configurationItemCaptureTime: Optional[ConfigurationItemCaptureTime] = None
    configurationItemStatus: Optional[ConfigurationItemStatus] = None
    configurationStateId: Optional[ConfigurationStateId] = None
    resourceCreationTime: Optional[ResourceCreationTime] = None
    resourceId: Optional[ResourceId] = None
    resourceName: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    supplementaryConfiguration: Optional[SupplementaryConfiguration] = None
    version: Optional[Version] = None


class BaseConfigurationItems(RootModel[List[BaseConfigurationItem]]):
    root: List[BaseConfigurationItem]


class BatchGetAggregateResourceConfigRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    ResourceIdentifiers: ResourceIdentifiersList


class BatchGetAggregateResourceConfigResponse(BaseModel):
    BaseConfigurationItems_1: Optional[BaseConfigurationItems] = Field(
        None, alias='BaseConfigurationItems'
    )
    UnprocessedResourceIdentifiers: Optional[UnprocessedResourceIdentifierList] = None


class BatchGetResourceConfigRequest(BaseModel):
    resourceKeys: ResourceKeys


class BatchGetResourceConfigResponse(BaseModel):
    baseConfigurationItems: Optional[BaseConfigurationItems] = None
    unprocessedResourceKeys: Optional[ResourceKeys] = None


class Compliance(BaseModel):
    ComplianceContributorCount_1: Optional[ComplianceContributorCount] = Field(
        None, alias='ComplianceContributorCount'
    )
    ComplianceType_1: Optional[ComplianceType] = Field(None, alias='ComplianceType')


class ComplianceByConfigRule(BaseModel):
    Compliance_1: Optional[Compliance] = Field(None, alias='Compliance')
    ConfigRuleName: Optional[StringWithCharLimit64] = None


class ComplianceByConfigRules(RootModel[List[ComplianceByConfigRule]]):
    root: List[ComplianceByConfigRule]


class ComplianceByResource(BaseModel):
    Compliance_1: Optional[Compliance] = Field(None, alias='Compliance')
    ResourceId: Optional[BaseResourceId] = None
    ResourceType: Optional[StringWithCharLimit256] = None


class ComplianceByResources(RootModel[List[ComplianceByResource]]):
    root: List[ComplianceByResource]


class ComplianceSummariesByResourceType(
    RootModel[List[ComplianceSummaryByResourceType]]
):
    root: List[ComplianceSummaryByResourceType]


class ConfigRule(BaseModel):
    ConfigRuleArn: Optional[StringWithCharLimit256] = None
    ConfigRuleId: Optional[StringWithCharLimit64] = None
    ConfigRuleName_1: Optional[ConfigRuleName] = Field(None, alias='ConfigRuleName')
    ConfigRuleState_1: Optional[ConfigRuleState] = Field(None, alias='ConfigRuleState')
    CreatedBy: Optional[StringWithCharLimit256] = None
    Description: Optional[EmptiableStringWithCharLimit256] = None
    EvaluationModes_1: Optional[EvaluationModes] = Field(None, alias='EvaluationModes')
    InputParameters: Optional[StringWithCharLimit1024] = None
    MaximumExecutionFrequency_1: Optional[MaximumExecutionFrequency] = Field(
        None, alias='MaximumExecutionFrequency'
    )
    Scope_1: Optional[Scope] = Field(None, alias='Scope')
    Source_1: Source = Field(..., alias='Source')


class ConfigRules(RootModel[List[ConfigRule]]):
    root: List[ConfigRule]


class ConfigurationAggregator(BaseModel):
    AccountAggregationSources: Optional[AccountAggregationSourceList] = None
    ConfigurationAggregatorArn_1: Optional[ConfigurationAggregatorArn] = Field(
        None, alias='ConfigurationAggregatorArn'
    )
    ConfigurationAggregatorName_1: Optional[ConfigurationAggregatorName] = Field(
        None, alias='ConfigurationAggregatorName'
    )
    CreatedBy: Optional[StringWithCharLimit256] = None
    CreationTime: Optional[Date] = None
    LastUpdatedTime: Optional[Date] = None
    OrganizationAggregationSource_1: Optional[OrganizationAggregationSource] = Field(
        None, alias='OrganizationAggregationSource'
    )


class ConfigurationAggregatorList(RootModel[List[ConfigurationAggregator]]):
    root: List[ConfigurationAggregator]


class ConfigurationItem(BaseModel):
    accountId: Optional[AccountId] = None
    arn: Optional[ARN] = None
    availabilityZone: Optional[AvailabilityZone] = None
    awsRegion: Optional[AwsRegion] = None
    configuration: Optional[Configuration] = None
    configurationItemCaptureTime: Optional[ConfigurationItemCaptureTime] = None
    configurationItemMD5Hash: Optional[ConfigurationItemMD5Hash] = None
    configurationItemStatus: Optional[ConfigurationItemStatus] = None
    configurationStateId: Optional[ConfigurationStateId] = None
    relatedEvents: Optional[RelatedEventList] = None
    relationships: Optional[RelationshipList] = None
    resourceCreationTime: Optional[ResourceCreationTime] = None
    resourceId: Optional[ResourceId] = None
    resourceName: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    supplementaryConfiguration: Optional[SupplementaryConfiguration] = None
    tags: Optional[Tags] = None
    version: Optional[Version] = None


class ConfigurationItemList(RootModel[List[ConfigurationItem]]):
    root: List[ConfigurationItem]


class ConfigurationRecorder(BaseModel):
    name: Optional[RecorderName] = None
    recordingGroup: Optional[RecordingGroup] = None
    roleARN: Optional[String] = None


class ConfigurationRecorderList(RootModel[List[ConfigurationRecorder]]):
    root: List[ConfigurationRecorder]


class ConformancePackComplianceFilters(BaseModel):
    ComplianceType: Optional[ConformancePackComplianceType] = None
    ConfigRuleNames: Optional[ConformancePackConfigRuleNames] = None


class ConformancePackDetail(BaseModel):
    ConformancePackArn_1: ConformancePackArn = Field(..., alias='ConformancePackArn')
    ConformancePackId_1: ConformancePackId = Field(..., alias='ConformancePackId')
    ConformancePackInputParameters_1: Optional[ConformancePackInputParameters] = Field(
        None, alias='ConformancePackInputParameters'
    )
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')
    CreatedBy: Optional[StringWithCharLimit256] = None
    DeliveryS3Bucket_1: Optional[DeliveryS3Bucket] = Field(
        None, alias='DeliveryS3Bucket'
    )
    DeliveryS3KeyPrefix_1: Optional[DeliveryS3KeyPrefix] = Field(
        None, alias='DeliveryS3KeyPrefix'
    )
    LastUpdateRequestedTime: Optional[Date] = None
    TemplateSSMDocumentDetails_1: Optional[TemplateSSMDocumentDetails] = Field(
        None, alias='TemplateSSMDocumentDetails'
    )


class ConformancePackDetailList(RootModel[List[ConformancePackDetail]]):
    root: List[ConformancePackDetail] = Field(..., max_length=25, min_length=0)


class ConformancePackRuleCompliance(BaseModel):
    ComplianceType: Optional[ConformancePackComplianceType] = None
    ConfigRuleName_1: Optional[ConfigRuleName] = Field(None, alias='ConfigRuleName')
    Controls: Optional[ControlsList] = None


class ConformancePackRuleComplianceList(RootModel[List[ConformancePackRuleCompliance]]):
    root: List[ConformancePackRuleCompliance] = Field(
        ..., max_length=1000, min_length=0
    )


class DeleteRemediationExceptionsRequest(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    ResourceKeys: RemediationExceptionResourceKeys


class DescribeAggregateComplianceByConformancePacksResponse(BaseModel):
    AggregateComplianceByConformancePacks: Optional[
        AggregateComplianceByConformancePackList
    ] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeComplianceByConfigRuleResponse(BaseModel):
    ComplianceByConfigRules_1: Optional[ComplianceByConfigRules] = Field(
        None, alias='ComplianceByConfigRules'
    )
    NextToken: Optional[String] = None


class DescribeComplianceByResourceResponse(BaseModel):
    ComplianceByResources_1: Optional[ComplianceByResources] = Field(
        None, alias='ComplianceByResources'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeConfigRulesResponse(BaseModel):
    ConfigRules_1: Optional[ConfigRules] = Field(None, alias='ConfigRules')
    NextToken: Optional[String] = None


class DescribeConfigurationAggregatorsResponse(BaseModel):
    ConfigurationAggregators: Optional[ConfigurationAggregatorList] = None
    NextToken: Optional[String] = None


class DescribeConfigurationRecordersResponse(BaseModel):
    ConfigurationRecorders: Optional[ConfigurationRecorderList] = None


class DescribeConformancePackComplianceRequest(BaseModel):
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')
    Filters: Optional[ConformancePackComplianceFilters] = None
    Limit: Optional[DescribeConformancePackComplianceLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeConformancePackComplianceResponse(BaseModel):
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')
    ConformancePackRuleComplianceList_1: ConformancePackRuleComplianceList = Field(
        ..., alias='ConformancePackRuleComplianceList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeConformancePacksResponse(BaseModel):
    ConformancePackDetails: Optional[ConformancePackDetailList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeOrganizationConfigRuleStatusesRequest(BaseModel):
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None
    OrganizationConfigRuleNames_1: Optional[OrganizationConfigRuleNames] = Field(
        None, alias='OrganizationConfigRuleNames'
    )


class DescribeOrganizationConfigRuleStatusesResponse(BaseModel):
    NextToken: Optional[String] = None
    OrganizationConfigRuleStatuses_1: Optional[OrganizationConfigRuleStatuses] = Field(
        None, alias='OrganizationConfigRuleStatuses'
    )


class DescribeOrganizationConfigRulesRequest(BaseModel):
    Limit: Optional[CosmosPageLimit] = None
    NextToken: Optional[String] = None
    OrganizationConfigRuleNames_1: Optional[OrganizationConfigRuleNames] = Field(
        None, alias='OrganizationConfigRuleNames'
    )


class DescribeOrganizationConformancePackStatusesResponse(BaseModel):
    NextToken: Optional[String] = None
    OrganizationConformancePackStatuses_1: Optional[
        OrganizationConformancePackStatuses
    ] = Field(None, alias='OrganizationConformancePackStatuses')


class DescribeOrganizationConformancePacksResponse(BaseModel):
    NextToken: Optional[String] = None
    OrganizationConformancePacks_1: Optional[OrganizationConformancePacks] = Field(
        None, alias='OrganizationConformancePacks'
    )


class DescribeRemediationExceptionsRequest(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken: Optional[String] = None
    ResourceKeys: Optional[RemediationExceptionResourceKeys] = None


class DescribeRemediationExceptionsResponse(BaseModel):
    NextToken: Optional[String] = None
    RemediationExceptions_1: Optional[RemediationExceptions] = Field(
        None, alias='RemediationExceptions'
    )


class DescribeRemediationExecutionStatusRequest(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken: Optional[String] = None
    ResourceKeys_1: Optional[ResourceKeys] = Field(None, alias='ResourceKeys')


class DescribeRetentionConfigurationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RetentionConfigurations: Optional[RetentionConfigurationList] = None


class EvaluationResultIdentifier(BaseModel):
    EvaluationResultQualifier_1: Optional[EvaluationResultQualifier] = Field(
        None, alias='EvaluationResultQualifier'
    )
    OrderingTimestamp: Optional[Date] = None
    ResourceEvaluationId_1: Optional[ResourceEvaluationId] = Field(
        None, alias='ResourceEvaluationId'
    )


class FailedDeleteRemediationExceptionsBatch(BaseModel):
    FailedItems: Optional[RemediationExceptionResourceKeys] = None
    FailureMessage: Optional[String] = None


class FailedDeleteRemediationExceptionsBatches(
    RootModel[List[FailedDeleteRemediationExceptionsBatch]]
):
    root: List[FailedDeleteRemediationExceptionsBatch]


class FailedRemediationExceptionBatch(BaseModel):
    FailedItems: Optional[RemediationExceptions] = None
    FailureMessage: Optional[String] = None


class FailedRemediationExceptionBatches(
    RootModel[List[FailedRemediationExceptionBatch]]
):
    root: List[FailedRemediationExceptionBatch]


class GetAggregateConfigRuleComplianceSummaryResponse(BaseModel):
    AggregateComplianceCounts: Optional[AggregateComplianceCountList] = None
    GroupByKey: Optional[StringWithCharLimit256] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetAggregateDiscoveredResourceCountsRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Filters: Optional[ResourceCountFilters] = None
    GroupByKey: Optional[ResourceCountGroupKey] = None
    Limit: Optional[GroupByAPILimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetAggregateDiscoveredResourceCountsResponse(BaseModel):
    GroupByKey: Optional[StringWithCharLimit256] = None
    GroupedResourceCounts: Optional[GroupedResourceCountList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TotalDiscoveredResources: Long


class GetAggregateResourceConfigResponse(BaseModel):
    ConfigurationItem_1: Optional[ConfigurationItem] = Field(
        None, alias='ConfigurationItem'
    )


class GetComplianceSummaryByResourceTypeRequest(BaseModel):
    ResourceTypes_1: Optional[ResourceTypes] = Field(None, alias='ResourceTypes')


class GetComplianceSummaryByResourceTypeResponse(BaseModel):
    ComplianceSummariesByResourceType_1: Optional[ComplianceSummariesByResourceType] = (
        Field(None, alias='ComplianceSummariesByResourceType')
    )


class GetDiscoveredResourceCountsRequest(BaseModel):
    limit: Optional[Limit] = None
    nextToken: Optional[NextToken] = None
    resourceTypes: Optional[ResourceTypes] = None


class GetDiscoveredResourceCountsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    resourceCounts: Optional[ResourceCounts] = None
    totalDiscoveredResources: Optional[Long] = None


class GetOrganizationConfigRuleDetailedStatusResponse(BaseModel):
    NextToken: Optional[String] = None
    OrganizationConfigRuleDetailedStatus_1: Optional[
        OrganizationConfigRuleDetailedStatus
    ] = Field(None, alias='OrganizationConfigRuleDetailedStatus')


class GetOrganizationConformancePackDetailedStatusResponse(BaseModel):
    NextToken: Optional[String] = None
    OrganizationConformancePackDetailedStatuses_1: Optional[
        OrganizationConformancePackDetailedStatuses
    ] = Field(None, alias='OrganizationConformancePackDetailedStatuses')


class GetResourceConfigHistoryResponse(BaseModel):
    configurationItems: Optional[ConfigurationItemList] = None
    nextToken: Optional[NextToken] = None


class GetResourceEvaluationSummaryResponse(BaseModel):
    Compliance: Optional[ComplianceType] = None
    EvaluationContext_1: Optional[EvaluationContext] = Field(
        None, alias='EvaluationContext'
    )
    EvaluationMode_1: Optional[EvaluationMode] = Field(None, alias='EvaluationMode')
    EvaluationStartTimestamp: Optional[Date] = None
    EvaluationStatus_1: Optional[EvaluationStatus] = Field(
        None, alias='EvaluationStatus'
    )
    ResourceDetails_1: Optional[ResourceDetails] = Field(None, alias='ResourceDetails')
    ResourceEvaluationId_1: Optional[ResourceEvaluationId] = Field(
        None, alias='ResourceEvaluationId'
    )


class ListAggregateDiscoveredResourcesRequest(BaseModel):
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    Filters: Optional[ResourceFilters] = None
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')


class ListDiscoveredResourcesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    resourceIdentifiers: Optional[ResourceIdentifierList] = None


class ListResourceEvaluationsRequest(BaseModel):
    Filters: Optional[ResourceEvaluationFilters] = None
    Limit: Optional[ListResourceEvaluationsPageItemLimit] = None
    NextToken: Optional[String] = None


class ListResourceEvaluationsResponse(BaseModel):
    NextToken: Optional[String] = None
    ResourceEvaluations_1: Optional[ResourceEvaluations] = Field(
        None, alias='ResourceEvaluations'
    )


class ListTagsForResourceResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags: Optional[TagList] = None


class OrganizationCustomPolicyRuleMetadata(BaseModel):
    DebugLogDeliveryAccounts_1: Optional[DebugLogDeliveryAccounts] = Field(
        None, alias='DebugLogDeliveryAccounts'
    )
    Description: Optional[StringWithCharLimit256Min0] = None
    InputParameters: Optional[StringWithCharLimit2048] = None
    MaximumExecutionFrequency_1: Optional[MaximumExecutionFrequency] = Field(
        None, alias='MaximumExecutionFrequency'
    )
    OrganizationConfigRuleTriggerTypes: Optional[
        OrganizationConfigRuleTriggerTypeNoSNs
    ] = None
    PolicyRuntime_1: PolicyRuntime = Field(..., alias='PolicyRuntime')
    PolicyText_1: PolicyText = Field(..., alias='PolicyText')
    ResourceIdScope: Optional[StringWithCharLimit768] = None
    ResourceTypesScope_1: Optional[ResourceTypesScope] = Field(
        None, alias='ResourceTypesScope'
    )
    TagKeyScope: Optional[StringWithCharLimit128] = None
    TagValueScope: Optional[StringWithCharLimit256] = None


class OrganizationCustomPolicyRuleMetadataNoPolicy(BaseModel):
    DebugLogDeliveryAccounts_1: Optional[DebugLogDeliveryAccounts] = Field(
        None, alias='DebugLogDeliveryAccounts'
    )
    Description: Optional[StringWithCharLimit256Min0] = None
    InputParameters: Optional[StringWithCharLimit2048] = None
    MaximumExecutionFrequency_1: Optional[MaximumExecutionFrequency] = Field(
        None, alias='MaximumExecutionFrequency'
    )
    OrganizationConfigRuleTriggerTypes: Optional[
        OrganizationConfigRuleTriggerTypeNoSNs
    ] = None
    PolicyRuntime_1: Optional[PolicyRuntime] = Field(None, alias='PolicyRuntime')
    ResourceIdScope: Optional[StringWithCharLimit768] = None
    ResourceTypesScope_1: Optional[ResourceTypesScope] = Field(
        None, alias='ResourceTypesScope'
    )
    TagKeyScope: Optional[StringWithCharLimit128] = None
    TagValueScope: Optional[StringWithCharLimit256] = None


class OrganizationCustomRuleMetadata(BaseModel):
    Description: Optional[StringWithCharLimit256Min0] = None
    InputParameters: Optional[StringWithCharLimit2048] = None
    LambdaFunctionArn: StringWithCharLimit256
    MaximumExecutionFrequency_1: Optional[MaximumExecutionFrequency] = Field(
        None, alias='MaximumExecutionFrequency'
    )
    OrganizationConfigRuleTriggerTypes_1: OrganizationConfigRuleTriggerTypes = Field(
        ..., alias='OrganizationConfigRuleTriggerTypes'
    )
    ResourceIdScope: Optional[StringWithCharLimit768] = None
    ResourceTypesScope_1: Optional[ResourceTypesScope] = Field(
        None, alias='ResourceTypesScope'
    )
    TagKeyScope: Optional[StringWithCharLimit128] = None
    TagValueScope: Optional[StringWithCharLimit256] = None


class OrganizationManagedRuleMetadata(BaseModel):
    Description: Optional[StringWithCharLimit256Min0] = None
    InputParameters: Optional[StringWithCharLimit2048] = None
    MaximumExecutionFrequency_1: Optional[MaximumExecutionFrequency] = Field(
        None, alias='MaximumExecutionFrequency'
    )
    ResourceIdScope: Optional[StringWithCharLimit768] = None
    ResourceTypesScope_1: Optional[ResourceTypesScope] = Field(
        None, alias='ResourceTypesScope'
    )
    RuleIdentifier: StringWithCharLimit256
    TagKeyScope: Optional[StringWithCharLimit128] = None
    TagValueScope: Optional[StringWithCharLimit256] = None


class PutAggregationAuthorizationRequest(BaseModel):
    AuthorizedAccountId: AccountId
    AuthorizedAwsRegion: AwsRegion
    Tags: Optional[TagsList] = None


class PutConfigRuleRequest(BaseModel):
    ConfigRule_1: ConfigRule = Field(..., alias='ConfigRule')
    Tags: Optional[TagsList] = None


class PutConfigurationAggregatorRequest(BaseModel):
    AccountAggregationSources: Optional[AccountAggregationSourceList] = None
    ConfigurationAggregatorName_1: ConfigurationAggregatorName = Field(
        ..., alias='ConfigurationAggregatorName'
    )
    OrganizationAggregationSource_1: Optional[OrganizationAggregationSource] = Field(
        None, alias='OrganizationAggregationSource'
    )
    Tags: Optional[TagsList] = None


class PutConfigurationAggregatorResponse(BaseModel):
    ConfigurationAggregator_1: Optional[ConfigurationAggregator] = Field(
        None, alias='ConfigurationAggregator'
    )


class PutConfigurationRecorderRequest(BaseModel):
    ConfigurationRecorder_1: ConfigurationRecorder = Field(
        ..., alias='ConfigurationRecorder'
    )


class PutOrganizationConfigRuleRequest(BaseModel):
    ExcludedAccounts_1: Optional[ExcludedAccounts] = Field(
        None, alias='ExcludedAccounts'
    )
    OrganizationConfigRuleName_1: OrganizationConfigRuleName = Field(
        ..., alias='OrganizationConfigRuleName'
    )
    OrganizationCustomPolicyRuleMetadata_1: Optional[
        OrganizationCustomPolicyRuleMetadata
    ] = Field(None, alias='OrganizationCustomPolicyRuleMetadata')
    OrganizationCustomRuleMetadata_1: Optional[OrganizationCustomRuleMetadata] = Field(
        None, alias='OrganizationCustomRuleMetadata'
    )
    OrganizationManagedRuleMetadata_1: Optional[OrganizationManagedRuleMetadata] = (
        Field(None, alias='OrganizationManagedRuleMetadata')
    )


class PutRemediationExceptionsRequest(BaseModel):
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    ExpirationTime: Optional[Date] = None
    Message: Optional[StringWithCharLimit1024] = None
    ResourceKeys: RemediationExceptionResourceKeys


class PutRemediationExceptionsResponse(BaseModel):
    FailedBatches: Optional[FailedRemediationExceptionBatches] = None


class PutResourceConfigRequest(BaseModel):
    Configuration_1: Configuration = Field(..., alias='Configuration')
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    ResourceName_1: Optional[ResourceName] = Field(None, alias='ResourceName')
    ResourceType: ResourceTypeString
    SchemaVersionId_1: SchemaVersionId = Field(..., alias='SchemaVersionId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class PutRetentionConfigurationResponse(BaseModel):
    RetentionConfiguration_1: Optional[RetentionConfiguration] = Field(
        None, alias='RetentionConfiguration'
    )


class PutStoredQueryRequest(BaseModel):
    StoredQuery_1: StoredQuery = Field(..., alias='StoredQuery')
    Tags: Optional[TagsList] = None


class RemediationExecutionStatus(BaseModel):
    InvocationTime: Optional[Date] = None
    LastUpdatedTime: Optional[Date] = None
    ResourceKey_1: Optional[ResourceKey] = Field(None, alias='ResourceKey')
    State: Optional[RemediationExecutionState] = None
    StepDetails: Optional[RemediationExecutionSteps] = None


class RemediationExecutionStatuses(RootModel[List[RemediationExecutionStatus]]):
    root: List[RemediationExecutionStatus]


class RemediationParameterValue(BaseModel):
    ResourceValue_1: Optional[ResourceValue] = Field(None, alias='ResourceValue')
    StaticValue_1: Optional[StaticValue] = Field(None, alias='StaticValue')


class RemediationParameters(RootModel[Optional[Dict[str, RemediationParameterValue]]]):
    root: Optional[Dict[str, RemediationParameterValue]] = None


class AggregateComplianceByConfigRule(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    AwsRegion_1: Optional[AwsRegion] = Field(None, alias='AwsRegion')
    Compliance_1: Optional[Compliance] = Field(None, alias='Compliance')
    ConfigRuleName_1: Optional[ConfigRuleName] = Field(None, alias='ConfigRuleName')


class AggregateComplianceByConfigRuleList(
    RootModel[List[AggregateComplianceByConfigRule]]
):
    root: List[AggregateComplianceByConfigRule]


class AggregateEvaluationResult(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    Annotation: Optional[StringWithCharLimit256] = None
    AwsRegion_1: Optional[AwsRegion] = Field(None, alias='AwsRegion')
    ComplianceType_1: Optional[ComplianceType] = Field(None, alias='ComplianceType')
    ConfigRuleInvokedTime: Optional[Date] = None
    EvaluationResultIdentifier_1: Optional[EvaluationResultIdentifier] = Field(
        None, alias='EvaluationResultIdentifier'
    )
    ResultRecordedTime: Optional[Date] = None


class AggregateEvaluationResultList(RootModel[List[AggregateEvaluationResult]]):
    root: List[AggregateEvaluationResult]


class ConformancePackEvaluationResult(BaseModel):
    Annotation_1: Optional[Annotation] = Field(None, alias='Annotation')
    ComplianceType: ConformancePackComplianceType
    ConfigRuleInvokedTime: Date
    EvaluationResultIdentifier_1: EvaluationResultIdentifier = Field(
        ..., alias='EvaluationResultIdentifier'
    )
    ResultRecordedTime: Date


class ConformancePackRuleEvaluationResultsList(
    RootModel[List[ConformancePackEvaluationResult]]
):
    root: List[ConformancePackEvaluationResult] = Field(
        ..., max_length=100, min_length=0
    )


class DeleteRemediationExceptionsResponse(BaseModel):
    FailedBatches: Optional[FailedDeleteRemediationExceptionsBatches] = None


class DescribeAggregateComplianceByConfigRulesResponse(BaseModel):
    AggregateComplianceByConfigRules: Optional[AggregateComplianceByConfigRuleList] = (
        None
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeRemediationExecutionStatusResponse(BaseModel):
    NextToken: Optional[String] = None
    RemediationExecutionStatuses_1: Optional[RemediationExecutionStatuses] = Field(
        None, alias='RemediationExecutionStatuses'
    )


class EvaluationResult(BaseModel):
    Annotation: Optional[StringWithCharLimit256] = None
    ComplianceType_1: Optional[ComplianceType] = Field(None, alias='ComplianceType')
    ConfigRuleInvokedTime: Optional[Date] = None
    EvaluationResultIdentifier_1: Optional[EvaluationResultIdentifier] = Field(
        None, alias='EvaluationResultIdentifier'
    )
    ResultRecordedTime: Optional[Date] = None
    ResultToken: Optional[String] = None


class EvaluationResults(RootModel[List[EvaluationResult]]):
    root: List[EvaluationResult]


class GetAggregateComplianceDetailsByConfigRuleResponse(BaseModel):
    AggregateEvaluationResults: Optional[AggregateEvaluationResultList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetComplianceDetailsByConfigRuleResponse(BaseModel):
    EvaluationResults_1: Optional[EvaluationResults] = Field(
        None, alias='EvaluationResults'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetComplianceDetailsByResourceResponse(BaseModel):
    EvaluationResults_1: Optional[EvaluationResults] = Field(
        None, alias='EvaluationResults'
    )
    NextToken: Optional[String] = None


class GetConformancePackComplianceDetailsResponse(BaseModel):
    ConformancePackName_1: ConformancePackName = Field(..., alias='ConformancePackName')
    ConformancePackRuleEvaluationResults: Optional[
        ConformancePackRuleEvaluationResultsList
    ] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class OrganizationConfigRule(BaseModel):
    ExcludedAccounts_1: Optional[ExcludedAccounts] = Field(
        None, alias='ExcludedAccounts'
    )
    LastUpdateTime: Optional[Date] = None
    OrganizationConfigRuleArn: StringWithCharLimit256
    OrganizationConfigRuleName_1: OrganizationConfigRuleName = Field(
        ..., alias='OrganizationConfigRuleName'
    )
    OrganizationCustomPolicyRuleMetadata: Optional[
        OrganizationCustomPolicyRuleMetadataNoPolicy
    ] = None
    OrganizationCustomRuleMetadata_1: Optional[OrganizationCustomRuleMetadata] = Field(
        None, alias='OrganizationCustomRuleMetadata'
    )
    OrganizationManagedRuleMetadata_1: Optional[OrganizationManagedRuleMetadata] = (
        Field(None, alias='OrganizationManagedRuleMetadata')
    )


class OrganizationConfigRules(RootModel[List[OrganizationConfigRule]]):
    root: List[OrganizationConfigRule]


class RemediationConfiguration(BaseModel):
    Arn: Optional[StringWithCharLimit1024] = None
    Automatic: Optional[Boolean] = None
    ConfigRuleName_1: ConfigRuleName = Field(..., alias='ConfigRuleName')
    CreatedByService: Optional[StringWithCharLimit1024] = None
    ExecutionControls_1: Optional[ExecutionControls] = Field(
        None, alias='ExecutionControls'
    )
    MaximumAutomaticAttempts: Optional[AutoRemediationAttempts] = None
    Parameters: Optional[RemediationParameters] = None
    ResourceType: Optional[String] = None
    RetryAttemptSeconds: Optional[AutoRemediationAttemptSeconds] = None
    TargetId: StringWithCharLimit256
    TargetType: RemediationTargetType
    TargetVersion: Optional[String] = None


class RemediationConfigurations(RootModel[List[RemediationConfiguration]]):
    root: List[RemediationConfiguration] = Field(..., max_length=25, min_length=0)


class DescribeOrganizationConfigRulesResponse(BaseModel):
    NextToken: Optional[String] = None
    OrganizationConfigRules_1: Optional[OrganizationConfigRules] = Field(
        None, alias='OrganizationConfigRules'
    )


class DescribeRemediationConfigurationsResponse(BaseModel):
    RemediationConfigurations_1: Optional[RemediationConfigurations] = Field(
        None, alias='RemediationConfigurations'
    )


class FailedRemediationBatch(BaseModel):
    FailedItems: Optional[RemediationConfigurations] = None
    FailureMessage: Optional[String] = None


class FailedRemediationBatches(RootModel[List[FailedRemediationBatch]]):
    root: List[FailedRemediationBatch]


class PutRemediationConfigurationsRequest(BaseModel):
    RemediationConfigurations_1: RemediationConfigurations = Field(
        ..., alias='RemediationConfigurations'
    )


class PutRemediationConfigurationsResponse(BaseModel):
    FailedBatches: Optional[FailedRemediationBatches] = None
